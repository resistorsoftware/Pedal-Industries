

{% render "giftkart_style" %}

<script async>
    // import a file from 
       let DEFAULT_addToCartBtnSelectors = 'input[name="add"], button[name="add"], form[action*="/cart/add"] input[type="submit"], form[action*="/cart/add"] button[type="submit"], form[action*="/cart/add"] button:not([type="button"]), form[action*="/cart/add"] .gkt__add-to-cart';
    let DEFAULT_checkoutBtnSelectors = 'button[name="checkout"], input[name="checkout"], form[action*="/cart"] a[href="/checkout"], a[href="/checkout"], form[action="/cart"] input[type="submit"][name="checkout"], form[action="/cart"] button[type="submit"][name="checkout"]';
    let DEFAULT_quantityBtnSelectors = '.ajaxcart__qty,quantity-input .quantity,.product-form__input, .product-form__quantity ';
    let DEFAULT_sideCartSelectors = '.cart-notification,cart-notification,.cart-notification-wrapper,#cart-notification, #CartDrawer, .drawer, .drawer-cover, .Drawer';
    let DEFAULT_buyNowBtn = '.shopify-payment-button__button, .shopify-payment-button__button--unbranded';
    let DEFAULT_cartForm = 'form[action="/cart"], form[action="/cart/"], form[action="cart"]';
    

    // window = this.window || {};

    //  the below code is liquid code that we are using in our theme.liquid file
    // how do i avoid compilation issues with js

    // let liquidValues = require('../snippets/shopify-liquid-values.liquid');

    //initialze liquid values 
    // check if window.shopifyLiquidValues EXISTS , if not then 
     
    if(!window.shopifyLiquidValues){
        let shopifyLiquidValues = {
            product: { handle: {{ product.handle | json }} },
            selected_or_first_available_variant: {{ product.selected_or_first_available_variant | json }},
            customer: {                     
                                            first_name: {{ customer.first_name | json }},
                                            email: {{ customer.email | json }},
                                            id: {{ customer.id | json }},
                                            has_account: {{ customer.has_account | json }},
                                            total_spent: {{ customer.total_spent | json }}
                                          }
        }
    
        window.shopifyLiquidValues = shopifyLiquidValues;
    }

    // {liquidValues}
    // // liquidValues 
   
    var gktUtils = {
        f: {}
    }
    window.gktUtils = gktUtils;

    /*
    *fn(param1, param2) =>   
    *param1 is url of script that we suppose to load 
    *param2 is function that should be called after script is loaded 
    */
    gktUtils.f.loadScript = function (a, b) {
        var c = document.createElement("script");
        c.type = "text/javascript";
        c.src = a;
        document.getElementsByTagName("head")[0].appendChild(c)
        c.onload = function () { b() };
    };

    /*
    * we changed loadScript function - if else block for onload is removed as it was not making sense
    *fn(param1) =>  
    *param1 - represents function that should be executed once jquery is loaded 
    *https://www.w3schools.com/jquery/jquery_noconflict.asp
    */
    gktUtils.f.loadJquery = function (b) {
        console.log("does this work");
        let flag = false;
        if("undefined" === typeof jQuery || 1.9 > parseFloat(jQuery.fn.jquery)){
            flag = true;
        }
        if("undefined" != typeof jQuery && jQuery.post == undefined){
            flag = true;
        }

        if(flag){
            gktUtils.f.loadScript("https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js", function () {
                gktJquery = jQuery.noConflict(!0);
                b(gktJquery)
            })
        }else{
            b(jQuery);
        }
    };

    var gkt = {
        debug: [],
        version: 1.1,
        state: {
            submitted: "",
            product_added: "",
            page_type: "",
            insertWrapperOnPage: [],
            cartData: undefined,
            isOverWriteBuyNowBtnTriggered: false,
            timer: undefined,
            freeGiftcardPopupModalTriggered: false,
            freeGiftcardPopupModalCount : parseInt(sessionStorage.getItem("freeGiftcardPopupModalCount"))|| 0,
            freeGiftcardPopupModalMAXCount : 2,
            gktFreeGiftcardBuyMoreProductNotificationSubHeadingShown: false,
            sendGiftcardOnPageBtnClicked: false
        },
        constants: {
            themesIds: {
                DAWN_THEME: 887,
                VENTURE_THEME: 775,
                EXPRESS_THEME: 885,
                CRAVE_THEME: 1363,
                SENSE_THEME: 1356,
                CRAFT_THEME: 1368,
            }
        },
        cartInterval: "",
        productinterval: "",
        f: {

            bootstrap: function (settings) {
                console.log("bootstap?");
                gkt.f.initDOM(settings);
                gkt.f.initThemeCSS(settings);
                gkt.f.globalListener(settings)
                // gkt.gktGiftMsgAndWrap.init(settings);
                gkt.storage.loadValuesFromStorage(gkt.settings);
                gkt.themeSpecificCode.init(gkt.settings)
            },
            initDOM: function (settings) {
                console.log("initDOM?");
                // gkt.$ = jQuery;
                gkt.$(document).ready(function () {
                    gkt.f.initDOMElements(settings);
                    // gkt.f.initDOMEvents(settings);
                });
            },
            initDOMElements: function (settings) {
                //insert the string skeletonDOM as html
                const skeletonDOM = gkt.$.parseHTML('</div> <div class="gktModalWrapper" style="display:none;"> <div class="gktModal"> <div class="gktModalHeader"> <!-- <strong class="gktModalPopupHeading"> </strong> --> <!-- <div class="gktModalClose"> &times; </div> --> <div class="gktModalClose"> </div> </div> <div class="gktContentWrapper"> <div class="gktLeftContent"> <div class="gktJustifyCenter"> <label class="gktCheckboxLayout"> <input type="checkbox" checked="true" class="gktGiftMessageCheckbox"> <div class="gktMessageCheckboxHeading"> </div> </label> </div> <textarea class="gktMessageTextarea gktAlignCenter"> </textarea> </div> <div class="gktRightContent"> <div class="gktJustifyCenter"> <label class="gktCheckboxLayout"> <input type="checkbox" checked="true" class="gktGiftWrapCheckbox"> <div class="gktGiftWrapCheckboxHeading"> </div> </label> </div> <img class="gktGiftWrapImage gktAlignCenter" loading="lazy"> </div> </div> <div class="gktModalFooter"> <div class="gktModalSave"></div> </div> </div> </div> </div> <!-- modal for combo --> </div> <div class="gktComboModalWrapper"> <div class="gktComboModal"> <div class="gktComboModalHeader"> <strong class="gktComboModalPopupHeading"> </strong> <!-- <div class="gktModalClose"> &times; </div> --> <div class="gktComboModalClose"> </div> </div> <div class="gktComboContent"> <div class="gktComboContentHeader"></div> <div class="gktComboContentFooter"> <div class="gktComboContentFooterBtn1"></div> <div class="gktComboContentFooterBtn2"></div> </div> </div> </div> </div> </div> </div> <div class="gktGiftCardModalWrapper"> <div class="gktGiftCardModal">  <div class="gktGiftCardModalHeader"> <strong class="gktGiftCardModalPopupHeading"> </strong> <!-- <div class="gktModalClose"> &times; </div> --> <div class="gktGiftCardModalClose"> </div> </div> <div class="gktGiftCardContent"> <div class="gktGiftCardContentHeader"></div> <form> <div class="gktGiftCardGreetingCardContent"> </div> <div class="gktGiftCardDetailsContent"></div> <div class="gktGiftCardMessageContent"></div> </form> <div class="gktGiftCardContentFooter"> <div class="gktGiftCardContentFooterBtn1"></div> </div></div><div class="gktPoweredByBanner"></div> </div>  </div> <div class="gktFreeGiftcardPopupModalWrapper"> <div class="gktFreeGiftcardPopupModal"> </div> </div> </div> <div class="gktNotificationWrapper"></div> <!-- <div class="gktVideoMsgPlayerWrapper"></div> -->')
                gkt.$("body").append(skeletonDOM);
                // gkt.elements.productPageWrapperV2.append(skeletonDOM);
                // gkt.elements.cartPageWrapperV2.append(skeletonDOM);

                //attach a link to the body
                gkt.$("body").append('<link rel="stylesheet" href="https://cdn.quilljs.com/1.2.6/quill.snow.css">');
            },
            getSettings: async function () {
                    //promise
                    console.log("GET setting of giftkart fired")
                    return new Promise(function (resolve, reject) {

                        console.log("fetching from s3")
                        gkt.f.getSettingsFromS3().then(
                            success => {
                                resolve(success);
                            }
                        ).catch(error => {
                            fetch("/apps/gkt/getTmpCartSettings",{
                            method: 'GET',
                            }).then(
                                response => response.json() // if the response is a JSON object
                            ).then(
                                success => {
                                    if(success.responseCode == 200){
                                        console.log("success-data", success.data);
                                    }
                                    resolve(success.data);
                                }
                            ).catch(error => {
                                console.log(error) // Handle the error response object
                                reject(error)
                               
                            });
                    });
                });

                },
            setSelectors:  function(){
                    let settings =  gkt.settings
                    gkt.selectors = {
                        addToCart: settings.app.addToCartBtnSelectors,
                        checkoutBtn: settings.app.checkoutBtnSelectors,
                        sideCartSelectors: settings.app.sideCartSelectors,
                        buyNowBtn: settings.app.buyNowBtn,
                        cartForm: settings.app.cartForm,
                        productPageWrapperV2: '.gktProductPageWrapperV2',
                        cartPageWrapperV2: '.gktCartPageWrapperV2',
                        quantityBtnSelectors : settings.app.quantityBtnSelectors,
                    }
                },
            getSettingsFromS3: async function () {
                    //promise
                    let shopName = window.Shopify.shop
                    console.log("GET setting of giftlab pro fired")
                    return new Promise(function (resolve, reject) {
					    fetch("https://giftkart-staging.s3.us-east-2.amazonaws.com/tempCartSettings/"+shopName+`.json?nocache=${(new Date()).getTime()}`,{
                            method: 'GET',
                            }).then(
                                response => response.json() // if the response is a JSON object
                            ).then(
                                success => {
                                    if(success.responseCode == 200){
                                        console.log("success-data", success);
                                    }
                                    resolve(success);
                                }
                            ).catch(error => {
                                console.log(error) // Handle the error response object
                                reject(error)
                                })
                            })
            },
            getLoggedInCustomer: async function () {
                try{
                    if(shopifyLiquidValues && shopifyLiquidValues.customer && shopifyLiquidValues.customer.id){
                        let customerData =  await fetch(`/apps/gkt/getLoggedInCustomer?email=${shopifyLiquidValues.customer.email}`);
                        // await new Promise(resolve => setTimeout(resolve, 10000)); //sleep to check loading state
                        let customerDataJson = await customerData.json();
                        customerDataJson = customerDataJson.data;
                        gkt.settings.customer = customerDataJson;
                        return customerDataJson;
                    }
                }catch(e){
                    console.log("error in getLoggedIncustomer=",e)
                    console.log("Have you setup /apps/gkt proxy properly?")
                    return false;
                }
            },
            addGiftCardToRewardCodeAPI: async function (_id) {
                try{
                    if(shopifyLiquidValues && shopifyLiquidValues.customer && shopifyLiquidValues.customer.id){
                        let addToGiftCardAPI = await fetch(`/apps/gkt/addGiftcardToRewardCode?gktGiftcardId=${_id}`,{
                            method: 'POST',
                        });
                        let addToGiftCardAPIJson = await addToGiftCardAPI.json();
                        addToGiftCardAPIJson = addToGiftCardAPIJson.data;
                        gkt.settings.customer = addToGiftCardAPIJson;
                        return addToGiftCardAPIJson;
                    }
                }catch(e){
                    console.log("error in addGiftCardToRewardCodeAPI=",e)
                    console.log("Have you setup /apps/gkt proxy properly?")
                    return false;
                }
            },
            setSettings: function(tmpCartSettings){
                var cart_settings = {
                    giftWrapProduct: {
                        productId: tmpCartSettings.productId,
                        productVairantID: tmpCartSettings.productVariantId,
                        giftWrapPrice: tmpCartSettings.giftWrapPrice,
                        giftWrapProductImage: tmpCartSettings.giftWrapImgUrl,
                        giftWrapShopifyImgUrl: tmpCartSettings.giftWrapShopifyImgUrl,
                        giftWrapHandle: tmpCartSettings.giftWrapHandle,
                        isGiftWrapEnabled: tmpCartSettings.isGiftWrap,
                        isVisibleOnCart: tmpCartSettings.isVisibleOnCart,
                        isVisibleOnAllProductPages: tmpCartSettings.isVisibleOnAllProductPages,
                        isVisibleOnSpecificProductPages: tmpCartSettings.isVisibleOnSpecificProductPages,
                        visibleOnSpecificProductPages: tmpCartSettings.visibleOnSpecificProductPages
                    },
                    giftMessage: tmpCartSettings.giftMessage || {},
                    popup: {
                        popupHeadingText: tmpCartSettings.popupHeadingText,
                        messageCheckboxHeading: tmpCartSettings.messageCheckboxHeading,
                        giftWrapCheckboxHeading: tmpCartSettings.giftWrapCheckboxHeading,
                        messageBoxplaceholder: tmpCartSettings.messageBoxplaceholder,
                        saveButtonBackgroundColor: tmpCartSettings.saveButtonBackgroundColor,
                        saveButtonTextColor: tmpCartSettings.saveButtonTextColor,
                        saveButtonText: tmpCartSettings.saveButtonText,
                        cartPopupBackgroundColor: tmpCartSettings.cartPopupBackgroundColor,
                        reloadOnCancelClick: tmpCartSettings.reloadOnCancelClick
                    },
                    giftingOptions: {
                        isGiftWrapEnabled: tmpCartSettings.isGiftWrap,
                        isGiftMessageEnabled: tmpCartSettings.isGiftField,
                        enabledGifiting: tmpCartSettings.enabledGifiting,
                        shopifyPageinnerHTML: tmpCartSettings.cartPageText
                    },
                    videoMessage: tmpCartSettings.videoMessageData,
                    pageWrapper: { cartPageText: tmpCartSettings.cartPageText },

                    combos: tmpCartSettings.combos || [],
                    oneClickUpsells: tmpCartSettings.oneClickUpsells || [],
                    giftCards: tmpCartSettings.giftCards || [],
                    greetingCards : tmpCartSettings.greetingCardData,
                    rewardCampaigns: tmpCartSettings.rewardCampaignData,
                    app: {
                        disableApp: tmpCartSettings.userData.customSettings.disableApp || false,
                        disableSideCart: tmpCartSettings.userData.customSettings.disableSideCart || false,
                        refreshProductPageOnGiftWrap: tmpCartSettings.userData.customSettings.refreshProductPageOnGiftWrap || false,
                        addToCartBtnSelectors: tmpCartSettings.userData.customSettings.addToCartBtnSelectors || DEFAULT_addToCartBtnSelectors,
                        checkoutBtnSelectors: tmpCartSettings.userData.customSettings.checkoutBtnSelectors || DEFAULT_checkoutBtnSelectors,
                        quantityBtnSelectors: tmpCartSettings.userData.customSettings.quantityBtnSelectors || DEFAULT_quantityBtnSelectors,
                        sideCartSelectors: tmpCartSettings.userData.customSettings.sideCartSelectors || DEFAULT_sideCartSelectors,
                        // cartDrawerSelectors: tmpCartSettings.userData.customSettings.cartDrawerSelectors || DEFAULT_cartDrawerSelectors,
                        // sideCartDrawerOverlay: tmpCartSettings.userData.customSettings.sideCartDrawerOverlay || DEFAULT_sideCartDrawerOverlay,
                        themeBackgroundColor : tmpCartSettings.userData.customSettings.themeBackgroundColor || "",

                        themeFontFamily: tmpCartSettings.userData.customSettings.themeFontFamily || "",
                        themeFontColor: tmpCartSettings.userData.customSettings.themeFontColor || "",

                        themeButtonBackgroundColor: tmpCartSettings.userData.customSettings.themeButtonBackgroundColor || "",
                        themButtonTextColor: tmpCartSettings.userData.customSettings.themButtonTextColor || "",
                        themeButtonBorderColor: tmpCartSettings.userData.customSettings.themeButtonBorderColor || "",
                        themeButtonBoxShadow: tmpCartSettings.userData.customSettings.themeButtonBoxShadow || "",
                        //button font family
                        themeButtonFontFamily: tmpCartSettings.userData.customSettings.themeButtonFontFamily || "",

                        themeHeaderFontFamily: tmpCartSettings.userData.customSettings.themeHeaderFontFamily || "",
                        themeHeaderFontColor: tmpCartSettings.userData.customSettings.themeHeaderFontColor || "",

                        themeLabelFontColor: tmpCartSettings.userData.customSettings.themeLabelFontColor || "",
                        themeLabelFontFamily: tmpCartSettings.userData.customSettings.themeLabelFontFamily || "",
                        
                        hidePoweredByBanner: tmpCartSettings.userData.customSettings.hidePoweredByBanner || false,

                        buyNowBtn: tmpCartSettings.userData.customSettings.buyNowBtn || DEFAULT_buyNowBtn,
                        cartForm: tmpCartSettings.userData.customSettings.cartForm || DEFAULT_cartForm,
                        addAfterAddTocartBtn:tmpCartSettings.userData.customSettings.addAfterAddTocartBtn || false,
                        addAftercheckoutBtn: tmpCartSettings.userData.customSettings.addAftercheckoutBtn || false,
                        activeVariantCodes: tmpCartSettings.userData.customSettings.activeVariantCodes || "123456789",
                        customStyleForGiftcard: tmpCartSettings.userData.customSettings.customStyleForGiftcard || null,
                        redirectUrlForSendGiftcardBtn: tmpCartSettings.userData.customSettings.redirectUrlForSendGiftcardBtn ?  window.location.origin + tmpCartSettings.userData.customSettings.redirectUrlForSendGiftcardBtn :  window.location.origin +  "/cart/checkout" ,
                    },
                    accountWidget: tmpCartSettings.userData.accountWidget,
                    merchantInfo: tmpCartSettings.userData,
                    languageData: tmpCartSettings.languageData,
                    SERVER_URL: tmpCartSettings.SERVER_URL
                }

                gkt.settings = cart_settings;
                console.log("settings assigned")

            },

            preparePoweredByBannerUI: function () {
                try{
                    let brandingToBeShown = ['basic', 'plus', 'basic-alpha', 'plus-alpha', 'basic-beta', 'plus-beta', 'basic-gamma', 'premium-gamma', 'basic-sept8', 'pro-nov7', 'pro-jan16-free', 'pro-jan16-19']
                   
                    let showPoweredByBanner = false;

                    if(gkt.settings.app.hidePoweredByBanner == true){
                        showPoweredByBanner = false;
                    }else{
                        for(let i=0;i<brandingToBeShown.length;i++){
                            if(gkt.settings.merchantInfo.isSubscription == false || gkt.settings.merchantInfo.isSubscription.name == brandingToBeShown[i]){
                                showPoweredByBanner = true;
                                break;
                            }
                        }
                    }

                    

                    if(showPoweredByBanner){
                        let gktPoweredByBannerHTML = gkt.$("<div>").addClass("gktPoweredByBanner");
                        let gktPoweredByBannerPreImageText = gkt.$("<div>").addClass("gktPoweredByBannerPreImageText").html("Powered by &nbsp;&nbsp;");
                        let gktPoweredByBannerPostImageText = gkt.$("<div>").addClass("gktPoweredByBannerPostImageText").html("&nbsp;&nbsp;  GiftKart");
                        let gktPoweredByBannerLogo = gkt.$("<img>").addClass("gkt-branding-banner-logo");
                        gktPoweredByBannerLogo.attr("src","https://d3ks0ngva6go34.cloudfront.net/public/giftkart_logo.jpg");
                        gktPoweredByBannerLogo.attr("alt","GiftKart");
                        //very smol 
                        gktPoweredByBannerLogo.attr("width","22");
                        gktPoweredByBannerLogo.attr("height","22");
    
                        gktPoweredByBannerHTML.append(gktPoweredByBannerPreImageText);
                        gktPoweredByBannerHTML.append(gktPoweredByBannerLogo);
                        gktPoweredByBannerHTML.append(gktPoweredByBannerPostImageText);

                        gktPoweredByBannerHTML.on("click",function(){
                            window.open("https://apps.shopify.com/giftkart","_blank");
                        })
    
                        return gktPoweredByBannerHTML;
                    }else{
                        gkt.$(".gktPoweredByBanner").remove();
                    }
                    return;
             }catch(err){
                console.log("error in preparePoweredByBannerUI",err);
                return;
            }
            },
            initThemeCSS: function (){
                console.log("initThemeCSS?",gkt.selectors.addToCart);
                let  addToCartBtnEle =  gkt.$(document).find(gkt.selectors.addToCart)
                let checkoutBtnEle = gkt.$(document).find(gkt.selectors.checkoutBtn)

                let buttonToOverRide = gkt.$(addToCartBtnEle).length > 0 ?  addToCartBtnEle : checkoutBtnEle;

                if(gkt.settings.app.themeFontFamily == "" && gkt.$("body").length>0){
                    gkt.settings.app.themeFontFamily = gkt.$("body").css("font-family");
                }
                //find the font color of the theme
                if(gkt.settings.app.themeFontColor == "" && gkt.$("p").length > 0){
                    gkt.settings.app.themeFontColor = gkt.$("p").css("color");
                }
                //theme background color
                if(gkt.settings.app.themeBackgroundColor == "" && gkt.$("body").length > 0){
                    gkt.settings.app.themeBackgroundColor = gkt.$("body").css("background-color");
                }
                if(gkt.settings.app.themeLabelFontColor == "" && gkt.$("label").length > 0){
                    gkt.settings.app.themeLabelFontColor = gkt.$("label").css("color");
                }
                // themeLabelFontFamily
                if(gkt.settings.app.themeLabelFontFamily == "" && gkt.$("label").length > 0){
                    gkt.settings.app.themeLabelFontFamily = gkt.$("label").css("font-family");
                }
                if(gkt.settings.app.themeButtonBackgroundColor == "" && gkt.$(buttonToOverRide).length > 0 ){
                    gkt.settings.app.themeButtonBackgroundColor = gkt.$(buttonToOverRide).css("background-color");
                }
                if(gkt.settings.app.themButtonTextColor == "" && gkt.$(buttonToOverRide).length > 0){
                    gkt.settings.app.themButtonTextColor = gkt.$(buttonToOverRide).css("color");
                }
                if(gkt.settings.app.themeButtonBorderColor == "" && gkt.$(buttonToOverRide).length > 0){
                    gkt.settings.app.themeButtonBorderColor = gkt.$(buttonToOverRide).css("border-color");
                }
                //box shadow
                if(gkt.settings.app.themeButtonBoxShadow == "" && gkt.$(buttonToOverRide).length > 0){
                    gkt.settings.app.themeButtonBoxShadow = gkt.$(buttonToOverRide).css("box-shadow");
                }
                // button font family
                if(gkt.settings.app.themeButtonFontFamily == "" && gkt.$(buttonToOverRide).length > 0){
                    gkt.settings.app.themeButtonFontFamily = gkt.$(buttonToOverRide).css("font-family");
                }
                if(gkt.settings.app.themeHeaderFontFamily == "" && gkt.$("h1").length > 0){
                    gkt.settings.app.themeHeaderFontFamily = gkt.$("h1").css("font-family");
                }
                if(gkt.settings.app.themeHeaderFontColor == "" && gkt.$("h1").length > 0){
                    gkt.settings.app.themeHeaderFontColor = gkt.$("h1").css("color");
                }
                
            },
            getPageType: function () {
                var pageType = "";
                if (window.location.pathname.includes("/cart") && !window.location.pathname.includes("/products")) {
                    pageType = "cart";
                } else if (window.location.pathname.includes("/products")) {
                    pageType = "product";
                } else if (window.location.pathname.includes("/collections")) {
                    pageType = "COLLECTION";
                } else if (window.location.pathname.includes("/")) {
                    pageType = "HOME";
                } else if ("undefined" != typeof Shopify && "undefined" != typeof Shopify.Checkout) {
                    pageType = "CHECKOUT";
                } else {
                    pageType = "PAGE_NOT_FOUND";
                }
                return pageType;
            },
            getProductPageHandle: function () {
                if ("product" === gkt.state.page_type && shopifyLiquidValues.product.handle) {
                    // let pattern = /(?<=\\/products\\/)((?!\\?|\\$).)+/g
                    // if(window && window.location && window.location.href){
                    //     return window.location.href.match(pattern)[0]
                    // }
                    return shopifyLiquidValues.product.handle

                }
                return "undefined"

            },
            applyPopupCSS: function (element) {
                //gktGiftCardModal background-color 
                // gktGiftCardInputFieldsDiv color of the font
                gkt.$(element).css("background-color", gkt.settings.app.themeBackgroundColor);
            },
            applyButtonCSS : function(element){
                
                //apply gkt.settings.app.themButtonTextColor themeButtonBackgroundColor themeButtonBorderColor to the button
                if(gkt.settings.app.themButtonTextColor != ""){
                    element.css("color", gkt.settings.app.themButtonTextColor);
                }
                if(gkt.settings.app.themeButtonBackgroundColor != ""){
                    element.css("background-color", gkt.settings.app.themeButtonBackgroundColor);
                }
                if(gkt.settings.app.themeButtonBorderColor != ""){
                    element.css("border","1px solid")
                    element.css("border-color", gkt.settings.app.themeButtonBorderColor);
                }
                // box shadow
                if(gkt.settings.app.themeButtonBoxShadow != ""){
                    element.css("box-shadow", gkt.settings.app.themeButtonBoxShadow);
                }
                //themeButtonFontFamily
                if(gkt.settings.app.themeButtonFontFamily != ""){
                    element.css("font-family", gkt.settings.app.themeButtonFontFamily);
                }
                
              
            },
            resetButtonCSS: function (element){
                //reset the button css
                element.css("color","");
                element.css("background-color","");
                element.css("border","");
                element.css("border-color","");
                element.css("box-shadow","");
            },
            applyHeaderCSS: function (element){
                //apply gkt.settings.app.themeFontFamily themeFontColor to the header
                if(gkt.settings.app.themeHeaderFontFamily != ""){
                    element.css("font-family", gkt.settings.app.themeHeaderFontFamily);
                }
                if(gkt.settings.app.themeHeaderFontColor != ""){
                    element.css("color", gkt.settings.app.themeHeaderFontColor);
                }
            },
            applyLabelCSS: function (element){
                //apply gkt.settings.app.themeLabelFontColor to the label
                if(gkt.settings.app.themeLabelFontColor != ""){
                    element.css("color", gkt.settings.app.themeLabelFontColor);
                }
                element.css("font-family","inherit");
                if(gkt.settings.app.themeLabelFontFamily != ""){
                element.css("font-family", gkt.settings.app.themeLabelFontFamily);
                }
            },
            getSelectedVariant: function () {
                if ("product" === gkt.state.page_type) {

                    let activeCodes = gkt.settings.app.activeVariantCodes;  
                      
                    if(activeCodes.indexOf("1") >= 0){
                        const params = Object.fromEntries(new URLSearchParams(location.search))
                        if(params && params.variant){
                            return params.variant
                        }
                    }
                   
                    if(activeCodes.indexOf("2") >= 0){
                            if (ShopifyAnalytics && ShopifyAnalytics.meta && ShopifyAnalytics.meta.selectedVariantId) {
                            for(let i = 0; i < ShopifyAnalytics.meta.product.variants.length; i++){
                                if(ShopifyAnalytics.meta.product.variants[i].id == ShopifyAnalytics.meta.selectedVariantId){
                                    return ShopifyAnalytics.meta.selectedVariantId
                                }
                            }
                        }
                    }
                    if(activeCodes.indexOf("3") >= 0){
                        if (document.querySelector('[name="id"]') && document.querySelector('[name="id"]').value) {
                            return document.querySelector('[name="id"]').value
                        }
                    }
                    
                    if(activeCodes.indexOf("4") >= 0){
                        if (shopifyLiquidValues.selected_or_first_available_variant) {
                            return shopifyLiquidValues.selected_or_first_available_variant.id
                        }
                    }

                    return undefined
                }
            },

            getProductQuantity: function () {
                if (document.querySelector('[name="quantity"]') && document.querySelector('[name="quantity"]').value) {
                    if(Number(document.querySelector('[name="quantity"]').value) && Number(document.querySelector('[name="quantity"]').value) <= 10){
                        return Number(document.querySelector('[name="quantity"]').value)
                    }else{
                        return 1
                    }       
                }else {
                    return 1
                }
            },

            getElements: function (settings) {
                return {
                    gktGiftMsgAndWrapWrapperParent: gkt.$(gkt.$.parseHTML('<div class="gktGiftMsgAndWrapHeader"><div class="gktGiftMsgAndWrapHeaderItem"><label for="gift-wrapping" class="gktGiftMsgAndWrapWrapperInnerEle"><input id="gift-wrapping" class="gktGiftOptionsCheckbox" type="checkbox" name="addGiftOptions"><span class="gktCustomWrapCheckboxCheckmark"></span><div class="gktGiftMsgAndWrapWrapperInnerEleHeading"></div></label> </div></div>')),
                    gktCartGiftMsgAndWrapWrapperParent: gkt.$(gkt.$.parseHTML('<div class="gktCartGiftMsgAndWrapHeader"><div class="gktCartGiftMsgAndWrapHeaderItem"><label for="gift-wrapping" class="gktGiftMsgAndWrapWrapperInnerEle"><input id="gift-wrapping" class="gktGiftOptionsCheckbox" type="checkbox" name="addGiftOptions"><span class="gktCustomWrapCheckboxCheckmark"></span><div class="gktGiftMsgAndWrapWrapperInnerEleHeading"></div></label></div></div>')),
                    addToCartBtn: gkt.$(document).find(gkt.selectors.addToCart),
                    addToCartButtonCloned: undefined,
                    checkoutBtn: gkt.$(document).find(gkt.selectors.checkoutBtn),
                    cartForm: gkt.$(document).find(gkt.selectors.cartForm),
                    productPageWrapperV2: gkt.$(gkt.$.parseHTML('<div class="gktPageWrapper gktProductPageWrapperV2"> <div class="gktComboWrapper"></div> <div class="gktProductPageUpsellWrapper"></div>  <div class="gktGiftMsgAndWrapWrapper"></div> <div class="gktGiftMessageWrapper"></div> <div class="gktGiftCardWrapper"></div>  </div>')),
                    cartPageWrapperV2: gkt.$(gkt.$.parseHTML('<div class="gktPageWrapper gktCartPageWrapperV2"> <div class="gktCartUpsellWrapper"></div> <div class="gktCartGiftMsgAndWrapWrapper"></div><div class="gktCartGiftMessageWrapper"></div> <div class="gktAccountWidgetWrapper"></div></div>')),
                    buyNowBtn: gkt.$(document).find(gkt.selectors.buyNowBtn)
                }
            },

            initialize: async function (jQuery) {
                //  gkt.$.ajaxSetup({global: true});
                let tmpCartSettings =  await gkt.f.getSettings();
                gkt.f.setSettings(tmpCartSettings)
                gkt.f.setSelectors();
                gkt.state.page_type = gkt.f.getPageType();
                gkt.elements = gkt.f.getElements(gkt.settings);
                if ("" === gkt.state.page_type) return false;
                gkt.utility.setLanguageLocale();
                return gkt.f.bootstrap(gkt.settings);
            },
            globalListener: function (settings) {
                let isIntervalActive = false
                //if app is disabled reurn
                if (settings.app.disableApp) {
                    return
                } else {
                    if ("product" === gkt.state.page_type) {
                        gkt.productPage.init(settings)
                    }

                    if (settings.app.disableSideCart) {
                        if ("cart" === gkt.state.page_type) {
                            gkt.cartPage.init(settings)
                        }
                    } else {
                        gkt.cartPage.init(settings)

                    }
                }

                setInterval(async () => {
                    if (!isIntervalActive) {
                        // console.log("globalListener-active")

                        isIntervalActive = true

                        // insert productpage wrapper if productPage is initialized
                        if ("product" === gkt.state.page_type &&
                            gkt.elements.addToCartBtn.length > 0 &&
                            gkt.$(document).find(gkt.selectors.productPageWrapperV2).length == 0) {
                            console.log("productPage-insertWrapperIntoPage1")
                            gkt.productPage.f.insertWrapperIntoPage(settings)
                        }

                        let checkoutBtnEle = gkt.$(document).find(gkt.selectors.checkoutBtn)

                        // insert cartPage wrapper if cartPage is initialized 
                        if (checkoutBtnEle.length > 0 &&
                            gkt.$(document).find(gkt.selectors.cartPageWrapperV2).length == 0) {
                            console.log("cartPage-insertWrapperIntoPage")
                            await gkt.cartPage.f.insertWrapperIntoPage(settings)
                        }

                        // check if comboproduct overwrite buyNowButton 
                        if (false && gkt.gktCombo.state.comboHandle != "") {
                            gkt.gktCombo.f.comboBuyNowButtonOverwrite()
                        }

                        // check if giftCard overwrite buyNowButton 
                        if (gkt.gktGiftCard.state.giftCardData) {
                            if(!gkt.elements.addToCartBtn.is(':visible')){
                                gkt.elements.addToCartBtn = gkt.$(document).find(gkt.selectors.addToCart)
                                gkt.gktGiftCard.f.giftCardAddToCartButtonOverwrite(gkt.gktGiftCard.state.giftCardData.isEmbededOnPage)
                            }
                            gkt.gktGiftCard.f.giftCardBuyNowButtonOverwrite()
                            if(!gkt.state.sendGiftcardOnPageBtnClicked){
                                gkt.gktGiftCard.f.changeGiftCardAddToCartButtonText(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.addToCartButtonText))
                            }
                           
                        }

                        // check if giftwrap, message or oneclick upsell overwrite buyNowButton
                        if(gkt.state.isOverWriteBuyNowBtnTriggered && gkt.$(document).find(".gkt-overwrite-buy-now-btn").length  == 0){
                            gkt.utility.overWriteBuyNowBtn()
                        }
                        
                        if( (gkt.state.page_type == "cart" || "product" === gkt.state.page_type) && 
                            gkt.settings.rewardCampaigns &&
                            gkt.settings.rewardCampaigns.status == "ACTIVE" &&
                            gkt.settings.rewardCampaigns.campaignData &&
                            gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct &&
                            gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct.length &&
                            gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct.length > 0
                             ){ 

                               await gkt.gktFreeGiftCardPopup.f.addFreeGiftcardProduct()
                            }
                             

                        isIntervalActive = false

                    }
                }, 1000)
            }
        },
        utility: {
            getActiveCurrencyRate : function(){
                let currencyRate = 1;
                if(window.Shopify && window.Shopify.currency && window.Shopify.currency.rate){
                    currencyRate = window.Shopify.currency.rate;
                }
                return currencyRate;
            },
            getCookie: function (cookieName) {
                let name = cookieName + "=";
                let decodedCookie = decodeURIComponent(document.cookie);
                let ca = decodedCookie.split(";");
                for (let i = 0; i < ca.length; i++) {
                    let c = ca[i];
                    while (c.charAt(0) == " ") {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) == 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return null;
            },
            getLocale: function () {
                if (window.Shopify && window.Shopify.locale) {
                    return window.Shopify.locale
                }else{
                    return "en"
                } 
            },
            setLanguageLocale: function () {
                let locale = gkt.utility.getLocale()
                
                if(gkt.settings.languageData && gkt.settings.languageData.languageMode == "SINGLE"){
                    locale = "en"
                }

                if(!gkt.settings.languageData[locale]){
                    locale = "en"
                }
                gkt.settings.languageData = gkt.settings.languageData[locale]
            },
            setCookie: function (cookieName, cookieValue, expiryDays = 7) {
                const d = new Date();
                d.setTime(d.getTime() + expiryDays * 24 * 60 * 60 * 1000);
                let expires = "expires=" + d.toUTCString();
                document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
            },
            addToCart: async function (data) {

                try {
                    // if there is nothing to add in cart..just return true
                    if (!data.id) {
                        return true
                    }
                    let result = await gkt.$.ajax({
                        url: "/cart/add.js",
                        data: data,
                        type: "POST",
                        dataType: "json",
                    })
                    return true
                } catch (error) {
                    console.error("gkt-utility-addToCart");
                    console.error(error);
                    return false
                }
            },
            updateCart: async function (data) {
                try {
                    let result = await gkt.$.ajax({
                        type: "POST",
                        url: "/cart/update.js",
                        data: data,
                        dataType: "json",
                    });
                    return result
                } catch (error) {
                    console.error("gkt-utility-updateCart");
                    console.error(error);
                    return false
                }
            },
            changeCart: async function (data) {
                try {
                    let result = await gkt.$.ajax({
                        type: "POST",
                        url: "/cart/change.js",
                        data: data,
                        dataType: "json",
                    });
                    return true
                } catch (error) {
                    console.error("gkt-utility-changeCart");
                    console.error(error);
                    return false
                }
            },

            getProductData: async function (productName) {
                try {
                    let result = await gkt.$.ajax({
                        type: "GET",
                        url: "/products/" + productName,
                        // data: data,
                        dataType: "json",
                    });
                    return result;
                } catch (error) {
                    console.error("gkt-utility-updateCart");
                    console.error(error);
                    return false
                }
            },
            getProductDataV2: function (productName) {
                try {
                    return new Promise((res, rej) => {
                        gkt.$.getJSON("/products/" + productName + ".js", function (product) {
                            console.log("success-productName: ", productName)
                            res(product)
                        }).fail(function () { console.log("fail-productName: ", productName); res(false) })
                    })
                    return result;
                } catch (error) {
                    console.error("gkt-utility-getProductDataV2");
                    console.error(error);
                    return false
                }
            },
            addToCartV2: function (data) {
                try {
                    return new Promise((res, rej) => {
                        gkt.$.post('/cart/add.js', data)
                            .done(function () { console.log("success-/cart/add.js': "); res(true) })
                            .fail(function (e) { 
                                console.log("fail-/cart/add.js", e); 
                                res(false)
                             })
                    })
                    return result;
                } catch (error) {
                    console.error("gkt-utility-addToCartV2");
                    console.error(error);
                    return false
                }
            },
            clearCart: function (data) {
                try {
                    return new Promise((res, rej) => {
                        gkt.$.post('/cart/clear.js', data)
                            .done(function () { console.log("success-/cart/clear.js': "); res(true) })
                            .fail(function () { console.log("fail-/cart/clear.js"); res(false) })
                    })
                    return result;
                } catch (error) {
                    console.error("gkt-utility-clearCart");
                    console.error(error);
                    return false
                }
            },
            getCart: async function (data) {
                try {
                    let result = await gkt.$.ajax({
                        type: "GET",
                        url: "/cart.js",
                        dataType: "json",
                    });
                    return result
                } catch (error) {
                    console.error("gkt-utility-getCart");
                    console.error(error);
                    return false
                }
            },
            getCartTotalQuantity: async function () {
                try {
                    let total = 0
                    let cartData = await gkt.$.ajax({
                        type: "GET",
                        url: "/cart.js",
                        dataType: "json",
                    });
                    for (var item of cartData['items']) {
                        total += item["quantity"]
                    }
                    return total
                } catch (error) {
                    console.error("gkt-utility-getCart");
                    console.error(error);
                    return false
                }
            },
            checkIfItemPresentInCart: function (searchedVariantId) {
                if (gkt.state.cartData && gkt.state.cartData.items && gkt.state.cartData.items.length && gkt.state.cartData.items.length > 0) {
                    for (let i = 0; i < gkt.state.cartData.items.length; i++) {
                        let item = gkt.state.cartData.items[i]
                        if (item && item.variant_id && item.variant_id == searchedVariantId) {
                            return item
                        }
                    }
                    return false
                } else {
                    return false
                }
            },
            getNoteFromCart: function () {
                if (gkt.state.cartData && gkt.state.cartData.note && gkt.state.cartData.note != "") {

                    return gkt.state.cartData.note
                } else {
                    return false
                }
            },
            isCartTotalMoreThan: async function(value){
                gkt.state.cartData = await gkt.utility.getCart()

                if(gkt.state.cartData && gkt.state.cartData.total_price && ((gkt.state.cartData.total_price)/100 >= parseFloat(value))){
                    return true
                }else{
                    return false
                }
            },
            cloneAddToCartBtn: function () {
            
            },
            overWriteBuyNowBtn: function (){
                
                let buyNowBtnEle = gkt.$(document).find(gkt.selectors.buyNowBtn)   

                if(buyNowBtnEle && buyNowBtnEle.length > 0 && gkt.$(document).find(".gkt-overwrite-buy-now-btn").length  == 0){
                    // buyNowBtnEle.show()
                    buyNowBtnEle.unbind().unbind("click").off().off("click");
                    newBuyNowBtnEle = buyNowBtnEle.clone()
                    buyNowBtnEle.before(newBuyNowBtnEle)
                    // buyNowBtnEle.hide()
                    newBuyNowBtnEle.addClass("gkt-overwrite-buy-now-btn")

                    buyNowBtnEle.css("visibility", "hidden")
                    buyNowBtnEle.css("height", "0")
                    buyNowBtnEle.css("width", "0")
                    buyNowBtnEle.css("padding", "0")
                    buyNowBtnEle.css("margin", "0")
                    buyNowBtnEle.css("line-height", "0");
                    buyNowBtnEle.css("min-height", "0");
                   // clone add to cart behavior 
                    // newBuyNowBtnEle.on("click", async function (event) {    
                    //      gkt.$(this).attr("disabled", true);
                    //     setTimeout(() => { gkt.$(this).attr("disabled", false); }, 1000)
                    //     event.preventDefault();
                    //     event.stopPropagation();
                    //     let selectedVariantId = gkt.f.getSelectedVariant()
                    //     let resAddToCart = await gkt.utility.addToCartV2({   "items": [
                    //                                         {
                    //                                             "id": selectedVariantId,
                    //                                             "quantity": 1
                    //                                         }
                    //                                         ]})
                    
                    //     window.location.href = window.location.origin + "/cart/checkout"
                    //     return
                    // })


                    newBuyNowBtnEle.on("click", function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        gkt.$(this).attr("disabled", true);
                        newBuyNowBtnEle.text("loading checkout...");
                        setTimeout(() => { gkt.$(this).attr("disabled", false)}, 3000)
                        addToCartBtnEle =  gkt.$(document).find(gkt.selectors.addToCart)
                        sideCartEle = gkt.$(document).find(gkt.selectors.sideCartSelectors) 

                        // gkt.$(document).find("body").addClass("loadingCheckoutPage")
                        // gkt.$(document).find("body").text("loading checkout...")

                        if(sideCartEle && sideCartEle.length > 0){
                            sideCartEle.css("display", "none")
                        }
                        
                        if(addToCartBtnEle && addToCartBtnEle.length > 0){
                            addToCartBtnEle.trigger("click")
                        }
                        setTimeout(()=>{
                            window.location.href = gkt.settings.app.redirectUrlForSendGiftcardBtn
                        },1000)
                        
                    })
                    
                }
            },
            emailValidation: function (emailString) {
                    var atSymbol = emailString.indexOf("@");
                    if (atSymbol < 1) return false;

                    var dot = emailString.lastIndexOf(".");                    
                    if (dot <= atSymbol + 2) return false;

                    // check that the dot is not at the end
                    if (dot === emailString.length - 1) return false;

                    return true;
            },
            renderLanguageValue: function (parent) {
                if (parent){
                    return parent.value;
                }
                return;
            },

            slider: {
                state: {
                    slideIndex: 0,
                },
                plusSlides: function (selector, n) {
                    this.showSlides(selector, this.state.slideIndex += n);
                },
                //minusSlides
                minusSlides: function (selector, n) {
                    this.showSlides(selector, this.state.slideIndex -= n);
                },
                showSlides: function (selector, n) {
                    var i;
                    var slides = selector.find(".gktComboItemContainerItem1Img");
                    if (slides && slides.length) {
                        //     slides = JSON.parse(slides);
                        // }


                        if (n > slides.length) { this.state.slideIndex = 1 }
                        if (n < 1) { this.state.slideIndex = slides.length }
                        for (i = 0; i < slides.length; i++) {
                            slides[i].style.display = "none";
                        }
                        slides[this.state.slideIndex - 1].style.display = "block";
                        //   plusSlides(1)
                    }
                    // setTimeout(function () { plusSlides(n + 1) }, 2000);
                },
            },

            isMobileView: function () {
                if (window.innerWidth < 768) {
                    return true;
                } else {
                    return false;
                }
            },
            displayLoadingSpinner: function () {
                let loadingContainer =  gkt.$("<div>").addClass("gktLoading");
                let loadingSpinner =  gkt.$("<div>").addClass("gktLoadingSpinner");
                loadingContainer.append(loadingSpinner);
                return loadingContainer;
            },
            dynamicStylesForBranding: function () {
                let brandingColor = {
                    mainTextColor: gkt.settings.accountWidget.customization.mainTextColor,
                    subTextColor : gkt.settings.accountWidget.customization.subTextColor,
                }
                let style =
                    `<style>
                     .gktAccountWidgetBodyTabActive{
                        color: ${brandingColor.mainTextColor} !important;
                        border-bottom: 2px solid ${brandingColor.mainTextColor} !important;
                     }                    
                     .gktLoadingSpinner-not-used {
                        border-top: 16px solid ${gkt.settings.accountWidget.customization.buttonColor};
                        border-bottom: 16px solid ${gkt.settings.accountWidget.customization.buttonColor};
                    }
                        
                    </style>`
                gkt.$('html > head').append(style);
                return style;
            },
            getLocalDateIn_YYYY_MM_DD: function (date=new Date()) {
                const year = date.getFullYear();
                const month = ('0' + (date.getMonth() + 1)).slice(-2);
                const day = ('0' + date.getDate()).slice(-2)

                const dateInLocalTimeZone = `${year}-${month}-${day}`;
                return dateInLocalTimeZone;
            },
        },
        storage: {

            loadValuesFromStorage: function (settings) {
                var gktGiftMessageCheckbox = sessionStorage.getItem("gktGiftMessageCheckbox");
                var gktMessageTextarea = sessionStorage.getItem("gktMessageTextarea");
                var gktGiftWrapCheckbox = sessionStorage.getItem("gktGiftWrapCheckbox");
                var gktGiftOptionsCheckbox = sessionStorage.getItem("gktGiftOptionsCheckbox");
                gkt.$('.gktMessageTextarea').val(gktMessageTextarea);

                if (gktGiftMessageCheckbox === null) {
                    gkt.$('.gktGiftMessageCheckbox').prop('checked', true);
                } else {
                    gkt.$('.gktGiftMessageCheckbox').prop('checked', gktGiftMessageCheckbox === "true");
                }

                if (gktGiftWrapCheckbox === null) {
                    gkt.$('.gktGiftWrapCheckbox').prop('checked', true);
                } else {
                    gkt.$('.gktGiftWrapCheckbox').prop('checked', gktGiftWrapCheckbox === "true");
                }

                if (gktGiftOptionsCheckbox === null) {

                    gkt.elements.cartPageWrapperV2.find(".gktGiftOptionsCheckbox").prop('checked', false)
                    gkt.elements.productPageWrapperV2.find(".gktGiftOptionsCheckbox").prop('checked', false)
                    gkt.$(document).find(".gktGiftOptionsCheckbox").prop('checked', false)
                } else {
                    gkt.elements.cartPageWrapperV2.find(".gktGiftOptionsCheckbox").prop('checked', gktGiftOptionsCheckbox === "true")
                    gkt.elements.productPageWrapperV2.find(".gktGiftOptionsCheckbox").prop('checked', gktGiftOptionsCheckbox === "true")
                    gkt.$(document).find(".gktGiftOptionsCheckbox").prop('checked', gktGiftOptionsCheckbox === "true")

                }

            },
            setItem: function (field, value) {
                sessionStorage.setItem(field, value)
            },
            getItem: function (field) {
                return sessionStorage.getItem(field)
            }
        },
        drawerCart: {
            init: function (settings) {
                gkt.cartPage.init(settings)
            }
        },
        themeSpecificCode: {
            init: function (settings) {
                gkt.themeSpecificCode.f.ventureTheme(settings)
                gkt.themeSpecificCode.f.expressTheme(settings)
                gkt.themeSpecificCode.f.craveTheme(settings)
                gkt.themeSpecificCode.f.craftTheme(settings)
                gkt.themeSpecificCode.f.senseTheme(settings)


            },

            f: {
                ventureTheme: function () {
                    if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gkt.constants.themesIds.VENTURE_THEME) {
                        // reload on save
                        gkt.selectors.sideCartDrawerOverlay = ""
                    }
                },
                expressTheme: function () {
                    if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gkt.constants.themesIds.EXPRESS_THEME) {
                        // addd a css property of jusyify-items:cetner to cartpagewrapper
                        gkt.elements.cartPageWrapperV2.css("justify-items", "center")
                        if (window.location.pathname.includes("/cart")) {
                            gkt.selectors.checkoutBtn = ".cart__actions"
                        }
                    }
                },
                craveTheme: function () {
                    if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gkt.constants.themesIds.CRAVE_THEME) {
                        // change css of cart__ctas in the document to block
                        gkt.$(document).find(".cart__ctas").css("display", "block")

                    }
                },
                craftTheme: function () {
                    if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gkt.constants.themesIds.CRAFT_THEME) {
                        // change css of cart__ctas in the document to block
                        gkt.$(document).find(".cart__ctas").css("display", "block")

                    }
                },
                senseTheme: function () {
                    if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gkt.constants.themesIds.SENSE_THEME) {
                        // change css of cart__ctas in the document to block
                        gkt.$(document).find(".cart__ctas").css("display", "block")

                    }
                },

            }
        },
        productPage: {
            init: async function (settings) {
                console.log("productPage-init")

                gkt.state.cartData = await gkt.utility.getCart()
                // gkt.state.insertWrapperOnPage.push("PRODUCT_PAGE")

                gkt.gktMessage.init(settings, "PRODUCT_PAGE")

                // gkt.gktCombo.init(settings)

                // gkt.gktGiftMsgAndWrap.init(settings, "PRODUCT_PAGE")

                gkt.gktOneClickUpsell.init(settings, "PRODUCT_PAGE")

                gkt.gktGiftCard.init(settings, "PRODUCT_PAGE")

                gkt.gktAccountWidget.init(settings,"CART_PAGE")

                gkt.gktNotification.init(settings, "CART_PAGE")
            },
            f: {
                insertWrapperIntoPage: function (settings) {

                    if ("undefined" != typeof gkt.elements.addToCartBtn) {
                        let addToCartBtnEle = gkt.$(document).find(gkt.elements.addToCartBtn)
                        addToCartBtnEle.each(function (index) {
                            if (gkt.$(this).is(":visible")) {
                                if(gkt.settings.app.addAfterAddTocartBtn){
                                    gkt.$(this).after(gkt.elements.productPageWrapperV2);
                                }else{
                                    gkt.$(this).before(gkt.elements.productPageWrapperV2);
                                }
                                
                            }

                        });
                    }
                },
            },
             
            actions: {
                insertUpsellModal: function () {
                    //   Gs.$("body").append(Gs.settings._modalHtml);
                    alert("popModal for upsell action")
                },
            },
        },
        cartPage: {
            init: async function (settings) {

                gkt.state.cartData = await gkt.utility.getCart()

                gkt.gktMessage.init(settings, "CART_PAGE")

                // gkt.gktGiftMsgAndWrap.init(settings, "CART_PAGE")

                gkt.gktOneClickUpsell.init(settings, "CART_PAGE")

                gkt.gktFreeGiftCardPopup.init(settings, "CART_PAGE")

                gkt.gktAccountWidget.init(settings,"CART_PAGE")

                gkt.gktNotification.init(settings, "CART_PAGE")

            },
            f: {
                insertWrapperIntoPage: function (settings) {
                    return new Promise((res, rej) => {
                        if ("undefined" != typeof gkt.elements.checkoutBtn) {
                            let checkoutBtnEle = gkt.$(document).find(gkt.selectors.checkoutBtn)
                            checkoutBtnEle.each(function (index) {
                                // console.log("index", index)
                                if (gkt.$(this).is(":visible")) {
                                    // check if theme ids matches otherwise add element to default position
                                    if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gkt.constants.themesIds.DAWN_THEME) {
                                        gkt.$(this).parent().before(gkt.elements.cartPageWrapperV2);
                                    } else if(gkt.settings.app.addAftercheckoutBtn) {
                                        gkt.$(this).after(gkt.elements.cartPageWrapperV2);
                                    }else{
                                        gkt.$(this).before(gkt.elements.cartPageWrapperV2);
                                    }
                                }
                            });

                        }
                        res()
                    })
                },
            },
            events: {
                ajaxSuccess: function (cartSettings) {
                    console.log("register ajax success event")
                    gkt.$(document).ajaxSuccess(function (event, xhr, settings) {
                        console.log("ajaxSuccess", settings.url)
                        if (settings.url == "/change.js?line=1&quantity=0" || settings.url == "change.js?line=1&quantity=0" || settings.url == "change.js" || settings.url == "/change.js" || settings.url == "/cart.js" || settings.url == "cart.js" || settings.url == "cart" || settings.url == "/cart") {
                            setTimeout(function () {
                                console.log("ajaxSuccess")

                            }, 2000);
                        }
                    });
                }
            }
        },
        gktOneClickUpsell: {
            init: async function (settings, parent) {
                await gkt.gktOneClickUpsell.initialize(settings, parent)
                gkt.gktOneClickUpsell.f.registerEvents()
            },
            initialize: async function (settings, parent) {
                let productHandle = gkt.f.getProductPageHandle(settings)

                // write function which return two list 
                // oneClickUpsell products that need to be shown on this product page 
                // get the list of oneClickUpsellProducts that need to be shown on cart page 
                let { oneClickUpsellListForCartPage, oneClickUpsellListForProductPage } = gkt.gktOneClickUpsell.f.segregateOneClickUpsells(settings.oneClickUpsells, productHandle)

                if (parent == "PRODUCT_PAGE" && oneClickUpsellListForProductPage && oneClickUpsellListForProductPage.length && oneClickUpsellListForProductPage.length > 0) {
                    let variantListToBeShownOnProductPage = await gkt.gktOneClickUpsell.f.findVariantListToBeShown(oneClickUpsellListForProductPage)
                    let oneClickUpsellProductPageHTML = gkt.gktOneClickUpsell.f.prepareUI(settings, variantListToBeShownOnProductPage, parent)
                    gkt.gktOneClickUpsell.f.insertIntoProductPageWrapper(settings, oneClickUpsellProductPageHTML)
                    console.log("variantListToBeShownOnProductPage", variantListToBeShownOnProductPage)
                    gkt.utility.overWriteBuyNowBtn()
                    gkt.state.isOverWriteBuyNowBtnTriggered = true
                    console.log("PRODUCT_PAGE")
                }

                if (parent == "CART_PAGE" && oneClickUpsellListForCartPage && oneClickUpsellListForCartPage.length && oneClickUpsellListForCartPage.length > 0) {
                    let variantListToBeShownOnCartPage = await gkt.gktOneClickUpsell.f.findVariantListToBeShown(oneClickUpsellListForCartPage)
                    let oneClickUpsellCartPageHTML = gkt.gktOneClickUpsell.f.prepareUI(settings, variantListToBeShownOnCartPage, parent)
                    gkt.gktOneClickUpsell.f.insertIntoCartPageWrapper(settings, oneClickUpsellCartPageHTML)
                    console.log("variantListToBeShownOnCartPage", variantListToBeShownOnCartPage)
                    console.log("CART_PAGE")
                }

            },
            f: {

                segregateOneClickUpsells: function (oneClickUpsells, currProductHandle) {
                    let oneClickUpsellListForCartPage = []
                    let oneClickUpsellListForProductPage = []

                    for (let i = 0; i < oneClickUpsells.length; i++) {
                        let oneClickUpsell = oneClickUpsells[i]

                        // add products to cart page list
                        if (oneClickUpsell.isVisibleOnCart) {
                            oneClickUpsellListForCartPage.push(oneClickUpsell)
                        }

                        // add products to product page list 
                        if (oneClickUpsell.isVisibleOnAllProductPages) {

                            oneClickUpsellListForProductPage.push(oneClickUpsell)

                        } else if (oneClickUpsell.isVisibleOnSpecificProductPages &&
                            oneClickUpsell.visibleOnSpecificProductPages &&
                            oneClickUpsell.visibleOnSpecificProductPages.find(x => x.handle === currProductHandle)) {

                            oneClickUpsellListForProductPage.push(oneClickUpsell)
                        }

                    }

                    return {
                        oneClickUpsellListForCartPage: oneClickUpsellListForCartPage,
                        oneClickUpsellListForProductPage: oneClickUpsellListForProductPage
                    }
                },
                findVariantListToBeShown: async function (oneClickUpsellList) {
                    let responseData = []

                    let variantListSelectedByUser = []
                    let apiCalls = []

                    for (let i = 0; i < oneClickUpsellList.length; i++) {
                        let oneClickUpsell = oneClickUpsellList[i]

                        for (let j = 0; j < oneClickUpsell.upsellProducts.length; j++) {
                            let oneClickUpsellProduct = oneClickUpsell.upsellProducts[j]
                            apiCalls.push(gkt.utility.getProductDataV2(oneClickUpsellProduct.handle))

                            for (let k = 0; k < oneClickUpsellProduct.variants.length; k++) {
                                variantListSelectedByUser.push(parseInt(oneClickUpsellProduct.variants[k].variantId))
                            }
                        }

                    }

                    let oneClickUpsellProducts = await Promise.all(apiCalls)
                    // get required variants and return 
                    for (let i = 0; i < oneClickUpsellProducts.length; i++) {
                        let oneClickUpsellProduct = oneClickUpsellProducts[i]

                        if (!oneClickUpsellProduct) {
                            continue
                        }

                        for (let j = 0; j < oneClickUpsellProduct.variants.length; j++) {
                            let variant = oneClickUpsellProduct.variants[j]
                            //if variant.featured_image is null then take the onceClickUpsellProduct.featured_image
                            if (variant.featured_image) {
                                variant.featured_image = variant.featured_image.src
                            } else {
                                variant.featured_image = oneClickUpsellProduct.featured_image
                            }
                            //console.log("ashfaq");
                            // if variant is not available dont add it
                            if (!variant.available) {
                                continue
                            }

                            // if variant is not selected in admin ui, dont add it
                            if (variantListSelectedByUser.indexOf(variant.id) == -1) {
                                continue
                            }

                            responseData.push(variant)

                        }
                    }

                    return responseData

                },
                insertIntoProductPageWrapper: function (settings, oneClickUpsellHTML) {

                    gkt.elements.productPageWrapperV2.find(".gktProductPageUpsellWrapper").css("display", "block")

                    // // insert into parent element 
                    // gkt.elements.gktGiftMsgAndWrapWrapperParent.find(".gktGiftMsgAndWrapWrapperInnerEle").append(settings.giftingOptions.shopifyPageinnerHTML);    //cartPageText                 

                    // insert final  element into productPageWrapperV2
                    gkt.elements.productPageWrapperV2.find(".gktProductPageUpsellWrapper").append(oneClickUpsellHTML);

                },
                insertIntoCartPageWrapper: function (settings, oneClickUpsellHTML) {

                    gkt.elements.cartPageWrapperV2.find(".gktCartUpsellWrapper").css("display", "block")

                    // insert into parent element 
                    // gkt.elements.gktCartGiftMsgAndWrapWrapperParent.find(".gktGiftMsgAndWrapWrapperInnerEle").append(settings.giftingOptions.shopifyPageinnerHTML);    //cartPageText                 

                    // insert final  element into productPageWrapperV2
                    // gkt.elements.cartPageWrapperV2.find(".gktCartUpsellWrapper").append(gkt.elements.gktCartGiftMsgAndWrapWrapperParent);
                    gkt.elements.cartPageWrapperV2.find(".gktCartUpsellWrapper").append(oneClickUpsellHTML);

                },
                prepareUI: function (settings, variantListToBeShown, parent) {
                    let gktOneClickUpsellContainer = gkt.$("<div>").addClass('gktOneClickUpsellContainer')


                    for (let i = 0; i < variantListToBeShown.length; i++) {
                        let variant = variantListToBeShown[i]
                        let gktOneClickUpsellItemContainer = gkt.$("<div>").addClass('gktOneClickUpsellItemContainer')
                        let gktOneClickUpsellItemContainerCheckboxLable = gkt.$("<label>").addClass('gktCustomCheckboxContainer')
                        let inputCheckboxEle = gkt.$("<input>").addClass('gktOneClickUpsellInputCheckboxEle')
                            .attr("type", "checkbox")
                            .attr("data-variant", JSON.stringify(variant))
                            .attr("data-parent", JSON.stringify(parent))

                        if (gkt.utility.checkIfItemPresentInCart(variant.id)) {
                            inputCheckboxEle.attr("checked", true)
                        }
                        let gktOneClickUpsellImage = gkt.$("<img>").addClass('gktOneClickUpsellImage')
                            .attr("src", variant.featured_image)
                        gktOneClickUpsellImage.css("width", "40px")
                        gktOneClickUpsellImage.css("height", "40px")
                        gktOneClickUpsellImage.css("justify-self", "right")

                        gktOneClickUpsellItemContainerCheckboxLable.append(inputCheckboxEle)
                        gktOneClickUpsellItemContainerCheckboxLable.append(gkt.$("<span>").addClass("gktCustomCheckboxCheckmark"))


                        let appendString = "" + variant.name
                        let price = variant.price > 0 ? parseFloat(variant.price / 100) : variant.price
                        if (settings.merchantInfo && settings.merchantInfo.currencyInfo && settings.merchantInfo.currencyInfo.symbol) {
                            appendString = appendString + " + " + settings.merchantInfo.currencyInfo.symbol + price
                        }
                        //create a div with appendString 
                        let gktOneClickUpsellItemContainerLableText = gkt.$("<div>").addClass('gktOneClickUpsellItemContainerLabelText')
                            .text(appendString)
                        gktOneClickUpsellItemContainerCheckboxLable.append(gktOneClickUpsellItemContainerLableText)
                        gktOneClickUpsellItemContainer.append(gktOneClickUpsellItemContainerCheckboxLable)
                        gktOneClickUpsellItemContainerCheckboxLable.append(gktOneClickUpsellImage)
                        gktOneClickUpsellContainer.append(gktOneClickUpsellItemContainer)
                    }

                    return gktOneClickUpsellContainer
                },
                registerEvents: function () {
                    gkt.$(document).on("click", ".gktOneClickUpsellInputCheckboxEle", async function (event) {
                        await gkt.gktOneClickUpsell.actions.handleOneClickUpsellOnChangEvent(event);
                        //gktPage type is cartPage then reload page
                        if (gkt.state.page_type == "cart") {
                            window.location.reload()
                            //turn off click events till the page loads
                            gkt.$("body").css("pointer-events", "none")
                        }
                    })
                }
            },
            actions: {
                handleOneClickUpsellOnChangEvent: async function (cb) {
                    if (cb && cb.target) {
                        let variant = JSON.parse(cb.target.getAttribute("data-variant"))
                        let parent = cb.target.getAttribute("data-parent")

                        // if true 
                        if (cb.target.checked) {
                            await gkt.utility.updateCart({ updates: { [variant.id]: 1 }, attributes:{[variant.id]:"gktOneClickUpsellBuy"}})
                        }
                        else {
                            await gkt.utility.updateCart({ updates: { [variant.id]: 0 }, attributes:{[variant.id]:""} })
                        }

                    }

                }
            }

        },
        gktGiftCard: {
            init: async function (settings, parent) {
                await gkt.gktGiftCard.initialize(settings, parent)
                gkt.gktGiftCard.f.registerEvents()
            },
            state: {
                isGiftCardAddToCartButtonOverwrite: false,
                isGiftCardBuyNowButtonOverwrite: false,
                giftCardAddToCartButtonClone: "",
                giftCardData: undefined,
                giftCardDiv: undefined,
                greetingCardActiveImageSrc: undefined,
                greetingCardSelectedCategory: undefined,
                giftCardDeliveryOption: "sendNow",
                greetingCardImageListDiv: undefined,
                modalNavList : [],
            },
            initialize: async function (settings, parent) {
                let productHandle = gkt.f.getProductPageHandle()
                let giftCardProduct = gkt.gktGiftCard.f.checkIfGiftCardProduct(productHandle, settings.giftCards)

                if (giftCardProduct) {

                    
                    gkt.gktGiftCard.state.giftCardData = giftCardProduct
                    gkt.gktGiftCard.state.giftCardData.isEmbededOnPage  = gkt.gktGiftCard.state?.giftCardData?.isEmbededOnPage ? true : false;
                    gkt.gktGiftCard.f.giftCardAddToCartButtonOverwrite(gkt.gktGiftCard.state.giftCardData.isEmbededOnPage)
                    gkt.gktGiftCard.f.giftCardBuyNowButtonOverwrite()

                    gkt.gktGiftCard.f.changeGiftCardAddToCartButtonText(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.addToCartButtonText))
                    gkt.gktGiftCard.f.initializeModal()
                    
                    if(gkt.gktGiftCard.state.giftCardData.isEmbededOnPage){
                        let productpageUi = gkt.gktGiftCard.f.getProductPageGiftCardUi() 
                        gkt.gktGiftCard.f.insertIntoProductPageWrapper(productpageUi)
                    }
                    
                    gkt.gktGiftCard.f.setCustomStylingForGiftcard()

                    // initialize video messages 
                    gkt.gktVideoMsg.init(settings, parent)
                }
                console.log("gktGiftCard initialize")
                console.log("settings.giftCard")
            },
            f: {
                insertIntoProductPageWrapper: function  (productpageUi) {
                    gkt.elements.productPageWrapperV2.find(".gktGiftCardWrapper").css("display", "block")
                    gkt.elements.productPageWrapperV2.find(".gktGiftCardWrapper").append(productpageUi);
                    
                },
                getProductPageGiftCardUi: function () {
                    let { modalHeading, modalDescription, recipientName, recipientNamePlaceholder, recipientEmail, recipientEmailPlaceholder, senderName, senderNamePlaceholder, giftNote, giftNotePlaceholder, buyNowButtonText,backButtonText,deliveryDate,sendNowButtonText,sendLaterButtonText } = gkt.settings.languageData.giftcardV2.purchasePageFields;
                    let productPageGiftCardUi =   gkt.$("<div>").addClass("productPageGiftCardUi")
                    let gktGiftCardToInputField = gkt.$("<input>").attr("type", "text").attr("placeholder", gkt.utility.renderLanguageValue(recipientNamePlaceholder)).addClass("gktGiftCardToInputField");
                    let gktGiftCardEmailInputField = gkt.$("<input>").attr("type", "email").attr("placeholder",  gkt.utility.renderLanguageValue(recipientEmailPlaceholder)).addClass("gktGiftCardEmailInputField");
                    let gktGiftCardMessageInputField = gkt.$("<textarea>").addClass("gktGiftCardMessageInputField").attr("placeholder", gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.giftNotePlaceholder))
                    let gktGiftCardEmailValidation = gkt.$("<p>", { class: "gktGiftCardEmailValidation" });

                    productPageGiftCardUi.append(gktGiftCardToInputField)
                    productPageGiftCardUi.append(gktGiftCardEmailInputField)
                    productPageGiftCardUi.append(gktGiftCardEmailValidation)
                    productPageGiftCardUi.append(gktGiftCardMessageInputField)
                    gkt.productPageGiftCardUi = productPageGiftCardUi;
                    return productPageGiftCardUi
                },
                setCustomStylingForGiftcard: function (){
                    let customStyleForGiftcard =  gkt.settings.app.customStyleForGiftcard
                    if(customStyleForGiftcard){
                        var styleSheet = document.createElement("style")
                        styleSheet.innerText = customStyleForGiftcard
                        document.body.appendChild(styleSheet)

                    }
                },
                checkIfGiftCardProduct: function (currProductHandle, giftCards) {
                    for (let i = 0; i < giftCards.length; i++) {
                        if (giftCards[i] && giftCards[i].shopifyData && giftCards[i].shopifyData.handle == currProductHandle) {
                            return giftCards[i]
                        }

                    }
                    return undefined
                },
                giftCardAddToCartButtonOverwrite: function (isEmbededOnPage) {

                    // set required states 
                    gkt.gktGiftCard.state.isGiftCardAddToCartButtonOverwrite = true
                    
                    gkt.elements.addToCartBtn.attr("type", "button")
                    gkt.elements.addToCartBtn.attr("disabled", false)
                    
                    gkt.elements.addToCartBtn.unbind().unbind("click").off().off("click");

                    if(isEmbededOnPage){
                        gkt.elements.addToCartBtn.on("click",  function (event) {
                            let formValid = gkt.gktGiftCard.f.performFormValidation();
                            if(!formValid){
                                return
                            }
                            gkt.$(this).attr("disabled", true);
                            setTimeout(() => { gkt.$(this).attr("disabled", false); }, 4000)
                            gkt.state.sendGiftcardOnPageBtnClicked = true
                            gkt.$(this).html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.buyNowButtonTextLoading));
                            gkt.gktGiftCard.action.onMessageSubmit(event);
                            
                        })
                    }else{
                        gkt.elements.addToCartBtn.on("click", function (event) {
                            // gkt.$(this).attr("disabled", true);
                            // setTimeout(() => { gkt.$(this).attr("disabled", false); }, 1000)
                            gkt.gktGiftCard.action.giftCardAddToCartButton(event)
                        })

                    }

                },
                giftCardBuyNowButtonOverwrite: function () {
                    // set required states 
                    gkt.gktGiftCard.state.isGiftCardBuyNowButtonOverwrite = true

                    if (gkt.$(document).find(gkt.selectors.buyNowBtn)) {
                        // gkt.$(document).find(gkt.selectors.buyNowBtn).hide()
                        let buyNowBtnEle =  gkt.$(document).find(gkt.selectors.buyNowBtn)
                        buyNowBtnEle.css("visibility", "hidden")
                        buyNowBtnEle.css("height", "0")
                        buyNowBtnEle.css("width", "0")
                        buyNowBtnEle.css("padding", "0")
                        buyNowBtnEle.css("margin", "0")
                        buyNowBtnEle.css("line-height", "0");
                        buyNowBtnEle.css("min-height", "0");
                    }
                },
                changeGiftCardAddToCartButtonText: function (insideHtml) {
                    if (gkt.gktGiftCard.state.isGiftCardAddToCartButtonOverwrite) {
                        gkt.elements.addToCartBtn.html(insideHtml)
                    } else {
                        return false
                    }

                },
                openGiftCardModal: function () {
                    gkt.$('.gktGiftCardModalWrapper').css('display', 'block')
                    gkt.$('.gktGiftCardModal .gktPoweredByBanner').html(gkt.f.preparePoweredByBannerUI());
                },
                registerEvents: function () {
                    gkt.$(document).on("click", ".gktGiftCardModalClose", gkt.gktGiftCard.action.onModalClose)
                },
                initializeModal: function () {
                    const isGreetingCardEnabled = gkt.settings.greetingCards.isGreetingCardEnabled &&
                                                  gkt.settings.greetingCards.greetingCardImgs &&
                                                  gkt.settings.greetingCards.greetingCardImgs.length>0;


                    if(isGreetingCardEnabled ){
                        gkt.gktGiftCard.f.prepareGreetingCardUI()
                        gkt.gktGiftCard.f.populateModalNavList();
                        gkt.gktGiftCard.f.displayGreetingCardForm()
                    }
                    else{
                        gkt.$('.greetingCardImageList').remove()
                        gkt.gktGiftCard.f.populateModalNavList();
                        gkt.gktGiftCard.f.displayGiftCardDetailsForm()    
                    }
                    gkt.gktGiftCard.f.prepareGiftCardUI();
                    gkt.gktGiftCard.f.prepareGiftCardMessage();
                },
                renderGreetingCardImages:function(imageList){
                    if(imageList){
                    let greetingCardImageList = gkt.$("<div>").addClass("greetingCardImageList")
                    for (let i = 0; i < imageList.length; i++) {
                        let _img = imageList[i].src;
                        // add an input event listener to each image of radio type 
                        imageInput = gkt.$("<input>").attr("type", "radio").attr("name", "greetingCardImage").attr("value", imageList[i].src)
                        imageInput.addClass("greetingCardImageInput")
                        let imageLabel = gkt.$("<label>").addClass('greetingCardImageLabel')
                        let image = gkt.$("<img>").addClass('greetingCardImage')
                        
                        //on click set the current item to the preview image as active image
                        imageLabel.on("click", gkt.gktGiftCard.action.onGreetingCardImageClick)
                        
                        //if image is checked then attach activeGreetingCard css to it
                        if (gkt.gktGiftCard.state.greetingCardActiveImageSrc == imageList[i].src) {
                            imageInput.attr("checked", true)
                            imageLabel.addClass("activeGreetingCard")
                            gkt.gktGiftCard.action.addCheckMarkDivs(imageLabel);
                        }
                        image.attr("src", imageList[i].src)
                        imageLabel.append(imageInput)
                        imageLabel.append(image)
                        greetingCardImageList.append(imageLabel)
                      }
                    // if greetingCardImageList has no elements then return that there are no Images to display
                    if (greetingCardImageList.children().length == 0) {
                        return gkt.$("<div>").addClass('greetingCardImageList').html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.noImagesAvailable))
                        }
                    return greetingCardImageList;
                    }

                 },    

                changeGreetingCardImageList: function(category){
                    let imageList = gkt.settings.greetingCards.greetingCardImgs
                    let imageListFiltered = gkt.gktGiftCard.f.filterGreetingCardImages(imageList,category)
                    let greetingCardImageList = gkt.gktGiftCard.f.renderGreetingCardImages(imageListFiltered)
                    // find the div with class greetingCardImageList and replace it with the new one
                    gkt.gktGiftCard.state.greetingCardImageListDiv = greetingCardImageList;

                    gkt.$(".greetingCardImageList").replaceWith(greetingCardImageList)
                    return greetingCardImageList;
                },
                filterGreetingCardImages: function(imageList,category){
                    let imageListFiltered = []
                    for (let i = 0; i < imageList.length; i++) {
                        if(imageList[i].categoryId == category.id){
                            imageListFiltered.push(imageList[i])
                        }
                    }
                    return imageListFiltered
                },
                prepareGreetingCardUI : async function (){
                    console.log("gktGiftCard.f.prepareGreetingCardUI")
                    const greetingCardFields = gkt.settings.languageData.giftcardV2.greetingCardFields
                    const continueButtonText = greetingCardFields.greetingCardContinueButtonText;
                    const greetingCardCategory = greetingCardFields.greetingCardCategory;
                    // This is where we have the greeting card categories, we need to render them in the modal as list items
                    const greetingCardCategories = [greetingCardFields.greetingCardCategory1,greetingCardFields.greetingCardCategory2,greetingCardFields.greetingCardCategory3]

                    let greetingCardContainer = gkt.$("<div>").addClass('gktGiftCardContainer')
                    let greetingCardMainBody = gkt.$("<div>").addClass('greetingCardMainBody')

                    
                    

                    // add a line of categories which the user can click on
                    let greetingCardCategoryList = gkt.$("<ul>").addClass('greetingCardCategoryList')
                    let greetingCardCategoryListItem = gkt.$("<li>").addClass('greetingCardCategoryListItem')
                    let greetingCardCategoryListItemText = gkt.$("<a>").addClass('greetingCardCategoryListItemText')
                    let imageInput = undefined;
                    let imageList =  gkt.settings.greetingCards.greetingCardImgs;

                    // add the image of the gift card as the first item in the list
                    //find the giftcard associated with this page handle

                    //find the giftcard associated with this page handle

                    
                    gkt.f.applyLabelCSS(greetingCardCategoryListItemText)
                    
                    let productHandle = gkt.f.getProductPageHandle(gkt.settings)
                    
                    //now get the giftcard associated with this page handle
                    // let  currGiftcardItem = gkt.settings.giftCards.find(giftcardItem => giftcardItem.shopifyData.handle == productHandle)
                    if(false){
                        let currGiftcardItem = await gkt.utility.getProductDataV2(productHandle);
                        let currGiftcardItemImage =  currGiftcardItem.images[0] || currGiftcardItem.featured_image
                        if(currGiftcardItemImage){
    
                            //add the image of the gift card as the first item in the list
                            //unshift is supprted by all browsers, checked on MDN
    
                            imageList.unshift({
                                category: "Occasion",
                                categoryId: "greetingCardCategory1",
                                id:0,                       
                                src:currGiftcardItemImage
                            })
                        }
    
                         // const getFirstImageFromGeneralCategory = imageList.find(x=>x.categoryId=="greetingCardCategory1");
                         let defaultGreetingCardSelection;
                         if(currGiftcardItemImage){
                            defaultGreetingCardSelection = imageList[0];
                         }
                        // const letsUseTheGiftCardImage = ;
                        if(currGiftcardItemImage){
                            gkt.gktGiftCard.state.greetingCardActiveImageSrc = defaultGreetingCardSelection.src
                        }
                    }
                    
                    gkt.gktGiftCard.state.greetingCardImageListDiv = gkt.gktGiftCard.f.renderGreetingCardImages(imageList)
                    
                    for (let i = 0; i < greetingCardCategories.length; i++) {
                        let greetingCardCategoryListItemClone = gkt.$(greetingCardCategoryListItem).clone()
                        let greetingCardCategoryListItemTextClone = gkt.$(greetingCardCategoryListItemText).clone()
                        greetingCardCategoryListItemTextClone.html(gkt.utility.renderLanguageValue(greetingCardCategories[i]))
                        
                        // Select the first category as default (General)
                        if(i == 0){
                            const _this =  greetingCardCategoryListItemClone[0];
                            gkt.gktGiftCard.state.greetingCardSelectedCategory = greetingCardCategories[0]
                            gkt.gktGiftCard.action.onGreetingCardCategoryClick.call(_this)
                        }
                        greetingCardCategoryListItemClone.on("click",function(){
                            gkt.gktGiftCard.state.greetingCardSelectedCategory=greetingCardCategories[i]
                            gkt.gktGiftCard.action.onGreetingCardCategoryClick.call(this)
                        })
                        greetingCardCategoryListItemClone.append(greetingCardCategoryListItemTextClone)
                        greetingCardCategoryList.append(greetingCardCategoryListItemClone)
                    }
                   
                    let imageListFiltered = gkt.gktGiftCard.f.filterGreetingCardImages(imageList,greetingCardCategories[0])
                    let greetingCardImageListHTML =  gkt.gktGiftCard.f.renderGreetingCardImages(imageListFiltered)
                    greetingCardMainBody.html(greetingCardImageListHTML)

                    greetingCardContainer.append(greetingCardCategoryList)
                    greetingCardContainer.append(greetingCardMainBody)

                    let gktGiftCardGreetingCardContent = gkt.$(".gktGiftCardGreetingCardContent")
                    gktGiftCardGreetingCardContent.append(greetingCardContainer)


                    gkt.$(".gktGiftCardContentFooterBtn1").html(gkt.utility.renderLanguageValue(continueButtonText));
                },
                prepareGiftCardUI: function () {
                    console.log("gktGiftCard.f.prepareGiftCardUI")
                    const inputFieldsHTML = gkt.gktGiftCard.f.renderInputFieldsForGiftCardDetails();                    
                    let gktGiftCardDetailsContent = gkt.$(".gktGiftCardDetailsContent")
                    //TODO prepareBackButton()
                    const isGreetingCardEnabled = gkt.settings.greetingCards.isGreetingCardEnabled 
                                                  && gkt.settings.greetingCards.greetingCardImgs
                                                  && gkt.settings.greetingCards.greetingCardImgs.length>0;
                    let gktGiftCardModalBackButton;
                     if(isGreetingCardEnabled){
                            gktGiftCardModalBackButton = gkt.gktGiftCard.f.prepareBackButton(gkt.gktGiftCard.f.displayGreetingCardForm);
                            gktGiftCardDetailsContent.append(gktGiftCardModalBackButton);
                        }
                    
                    gktGiftCardDetailsContent.append(inputFieldsHTML)
                    // gktGiftCardDetailsContent.append(gktVideoMsgButton)

                    // append close button 
                    gktGiftCardModalCloseDiv =  gkt.$(".gktGiftCardModalClose")
                    let closeButtonSvg = '<svg width="24px" height="24px" enable-background="new 0 0 587.91 587.91" version="1.1" viewBox="0 0 587.91 587.91" xml:space="preserve" xmlns="http://www.w3.org/2000/svg"><path d="m86.451 501.46c26.937 26.936 58.315 48.088 93.265 62.871 36.207 15.314 74.642 23.078 114.24 23.078 39.596 0 78.032-7.764 114.24-23.078 34.949-14.783 66.328-35.936 93.266-62.871 26.936-26.938 48.09-58.316 62.871-93.266 15.314-36.207 23.08-74.643 23.08-114.24 0-39.598-7.766-78.033-23.08-114.24-14.781-34.95-35.936-66.328-62.871-93.265-26.938-26.937-58.316-48.09-93.266-62.872-36.208-15.315-74.643-23.079-114.24-23.079-39.597 0-78.032 7.765-114.24 23.079-34.95 14.782-66.328 35.936-93.265 62.872s-48.09 58.315-62.873 93.264c-15.313 36.207-23.078 74.642-23.078 114.24 0 39.596 7.765 78.031 23.079 114.24 14.782 34.95 35.936 66.328 62.872 93.266zm207.5-458.12c138.41 0 250.61 112.2 250.61 250.62 0 138.41-112.2 250.61-250.61 250.61s-250.62-112.2-250.62-250.61c0-138.41 112.2-250.62 250.62-250.62z"/><path d="m293.96 587.91c-39.667 0-78.167-7.778-114.43-23.117-35.01-14.809-66.442-35.998-93.423-62.979-26.983-26.984-48.172-58.417-62.979-93.425-15.341-36.269-23.119-74.77-23.119-114.43 0-39.663 7.778-78.165 23.118-114.44 14.807-35.008 35.997-66.44 62.979-93.423s58.415-48.172 93.423-62.979c36.27-15.34 74.771-23.118 114.43-23.118 39.666 0 78.167 7.778 114.43 23.119 35.009 14.807 66.441 35.997 93.425 62.979 26.984 26.985 48.173 58.417 62.979 93.423 15.341 36.27 23.119 74.771 23.119 114.43 0 39.662-7.778 78.163-23.119 114.43-14.806 35.007-35.994 66.439-62.979 93.425-26.982 26.98-58.415 48.169-93.425 62.979-36.266 15.338-74.767 23.116-114.43 23.116zm0-586.91c-39.529 0-77.898 7.751-114.04 23.039-34.889 14.757-66.215 35.874-93.106 62.765-26.892 26.892-48.009 58.217-62.766 93.105-15.288 36.147-23.039 74.517-23.039 114.05 0 39.527 7.751 77.898 23.039 114.04 14.757 34.889 35.874 66.214 62.766 93.106 26.89 26.889 58.215 48.006 93.106 62.765 36.142 15.287 74.512 23.038 114.04 23.038s77.901-7.751 114.04-23.039c34.89-14.758 66.216-35.875 93.106-62.764 26.893-26.895 48.009-58.22 62.764-93.106 15.289-36.146 23.041-74.516 23.041-114.04 0-39.529-7.752-77.899-23.041-114.04-14.754-34.887-35.871-66.212-62.764-93.106-26.892-26.891-58.218-48.008-93.106-62.765-36.144-15.289-74.514-23.04-114.04-23.04zm0 544.07c-67.075 0-130.14-26.12-177.56-73.549-47.429-47.43-73.55-110.49-73.55-177.56s26.12-130.14 73.55-177.56c47.429-47.429 110.49-73.55 177.56-73.55s130.14 26.121 177.56 73.55c47.43 47.43 73.55 110.49 73.55 177.56s-26.12 130.14-73.55 177.56c-47.429 47.429-110.49 73.549-177.56 73.549zm0-501.23c-66.808 0-129.62 26.017-176.86 73.257-47.24 47.241-73.257 110.05-73.257 176.86s26.017 129.62 73.257 176.86c47.24 47.24 110.05 73.257 176.86 73.257s129.62-26.017 176.86-73.257c47.24-47.239 73.257-110.05 73.257-176.86 0-66.808-26.017-129.62-73.257-176.86-47.241-47.241-110.05-73.257-176.86-73.257z"/><path d="m184.92 402.99c4.183 4.184 9.664 6.275 15.146 6.275s10.964-2.092 15.146-6.275l78.742-78.742 78.743 78.742c4.182 4.184 9.664 6.275 15.146 6.275s10.963-2.092 15.146-6.275c8.365-8.363 8.365-21.926 0-30.291l-78.744-78.742 78.742-78.743c8.365-8.365 8.365-21.928 0-30.292-8.363-8.365-21.926-8.365-30.291 0l-78.743 78.743-78.742-78.743c-8.365-8.365-21.928-8.365-30.292 0-8.365 8.365-8.365 21.927 0 30.292l78.743 78.743-78.743 78.742c-8.364 8.365-8.364 21.928 1e-3 30.291z"/><path d="m387.84 409.76c-5.856 0-11.36-2.28-15.5-6.422l-78.389-78.389-78.388 78.389c-4.14 4.142-9.645 6.422-15.5 6.422s-11.36-2.28-15.5-6.422c-4.14-4.14-6.42-9.644-6.42-15.498 0-5.855 2.28-11.359 6.42-15.5l78.389-78.389-78.389-78.389c-8.546-8.547-8.546-22.453 0-31 4.14-4.14 9.644-6.42 15.5-6.42 5.855 0 11.36 2.28 15.5 6.42l78.389 78.389 78.389-78.389c4.141-4.14 9.645-6.42 15.5-6.42 5.854 0 11.358 2.28 15.498 6.42 4.141 4.14 6.42 9.645 6.42 15.5s-2.279 11.36-6.42 15.5l-78.389 78.389 78.391 78.389c4.141 4.141 6.421 9.645 6.421 15.5 0 5.854-2.28 11.358-6.421 15.498-4.143 4.141-9.647 6.422-15.501 6.422zm-93.889-86.225 79.096 79.096c3.95 3.952 9.204 6.129 14.793 6.129 5.587 0 10.841-2.177 14.793-6.129 3.951-3.95 6.128-9.203 6.128-14.791s-2.177-10.842-6.128-14.793l-79.098-79.096 79.096-79.096c3.951-3.951 6.127-9.205 6.127-14.793s-2.176-10.841-6.127-14.792c-3.95-3.951-9.203-6.127-14.791-6.127s-10.842 2.176-14.793 6.127l-79.096 79.096-79.096-79.096c-3.951-3.951-9.205-6.127-14.793-6.127s-10.841 2.176-14.792 6.127c-8.156 8.157-8.156 21.428 0 29.585l79.096 79.096-79.096 79.096c-3.951 3.951-6.127 9.205-6.127 14.793s2.176 10.841 6.127 14.791c3.952 3.952 9.205 6.129 14.793 6.129s10.841-2.177 14.793-6.129l79.095-79.096z"/></svg>'
                    gktGiftCardModalCloseDiv.append(closeButtonSvg)
                },
                prepareBackButton: function (callback){
                    let gktGiftCardModalBackButton = gkt.$("<div>").addClass("gktGiftCardModalBackButton")
                    let gktGiftCardModalBackButtonSVG = gkt.$("<div>").addClass("gktGiftCardModalBackButtonSVG")
                    gktGiftCardModalBackButtonSVG.append('<svg class="svg-icon" style="width: 16px; height: 16px;vertical-align: middle;fill: currentColor;overflow: hidden; transform: rotate(180deg);" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M682.666667 533.333333a21.333333 21.333333 0 0 1-15.146667-6.186666l-298.666667-298.666667a21.333333 21.333333 0 0 1 30.293334-30.293333l298.666666 298.666666a21.333333 21.333333 0 0 1 0 30.293334A21.333333 21.333333 0 0 1 682.666667 533.333333z" fill="#333333" /><path d="M384 832a21.333333 21.333333 0 0 1-15.146667-6.186667 21.333333 21.333333 0 0 1 0-30.293333l298.666667-298.666667a21.333333 21.333333 0 0 1 30.293333 30.293334l-298.666666 298.666666A21.333333 21.333333 0 0 1 384 832z" fill="#333333" /></svg>')
                    let gktGiftCardModalBackButtonText =  gkt.$("<div>").addClass("gktGiftCardModalBackButtonText").append(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.backButtonText))
                    gktGiftCardModalBackButton.append(gktGiftCardModalBackButtonSVG)
                    gktGiftCardModalBackButton.append(gktGiftCardModalBackButtonText)
                        gktGiftCardModalBackButton.on("click", function () {
                            callback()       
                        })
                    return gktGiftCardModalBackButton;
                },
                renderInputFieldsForGiftCardDetails: function(){
                    let { modalHeading, modalDescription, recipientName, recipientNamePlaceholder, recipientEmail, recipientEmailPlaceholder, senderName, senderNamePlaceholder, giftNote, giftNotePlaceholder, buyNowButtonText,backButtonText,deliveryDate,sendNowButtonText,sendLaterButtonText } = gkt.settings.languageData.giftcardV2.purchasePageFields;
                    
                    let gktGiftCardModalPopupHeading = gkt.$("gktGiftCardModalPopupHeading")
                    let gktGiftCardModalHeader = gkt.$(".gktGiftCardModalHeader")

                    let gktGiftCardToInputField = gkt.$("<input>").attr("type", "text").attr("placeholder", gkt.utility.renderLanguageValue(recipientNamePlaceholder)).addClass("gktGiftCardToInputField");
                    let gktGiftCardEmailInputField = gkt.$("<input>").attr("type", "email").attr("placeholder",  gkt.utility.renderLanguageValue(recipientEmailPlaceholder)).addClass("gktGiftCardEmailInputField");
                    let gktGiftCardFromInputField = gkt.$("<input>").attr("type", "text").attr("placeholder",  gkt.utility.renderLanguageValue(senderNamePlaceholder)).addClass("gktGiftCardFromInputField");

                    // attach a checkbox, 
                    let gktGiftCardModalCheckboxContainer = gkt.$("<div>").addClass("gktGiftCardModalCheckboxContainer")
                    let gktGiftCardModalCheckbox = gkt.$("<label>").addClass("gktGiftCardModalCheckbox")
                    let gktGiftCardInputCheckbox = gkt.$("<input>").attr("type","checkbox").addClass("gktGiftCardModalCheckboxInput").attr("name","gktGiftCardModalCheckbox")
                                                    .on("change",function(){
                                                        gkt.gktGiftCard.action.onSendSelfClick();
                                                    })
                                                    
                    let gktCustomCheckboxCheckmarkSmall = gkt.$("<span>").addClass("gktCustomCheckboxCheckmarkSmall").attr("for","gktGiftCardModalCheckbox")
                    let gktGiftCardModalCheckboxLabel = gkt.$("<span>").addClass("gktGiftCardModalCheckboxLabel").attr("for","gktGiftCardModalCheckbox")
                    gktGiftCardModalCheckboxContainer.append(gktGiftCardModalCheckbox)
                    
                    // a date picker 
                    let gktGiftCardDatePicker = gkt.$("<input>").attr("type", "date").addClass("gktGiftCardDatePicker"); 
                    //  todays date is the default value
                    // gktGiftCardDatePicker.attr("value", new Date().toISOString().slice(0, 10));  
                    gktGiftCardDatePicker.attr("value", gkt.utility.getLocalDateIn_YYYY_MM_DD());
                    let gktGiftCardMessageInputField = gkt.$("<textarea>").attr("type", "text").attr("placeholder", gkt.utility.renderLanguageValue(giftNotePlaceholder)).addClass("gktGiftCardMessageInputField").attr("rows", "4");


                    let gktGiftCardEmailValidation = gkt.$("<p>", { class: "gktGiftCardEmailValidation" });
                    let gktGiftCardDateValidation = gkt.$("<p>", { class: "gktGiftCardDateValidation" });
                    // add a label to all of these fields
                    let gktGiftCardToLabel = gkt.$("<label>").addClass("gktGiftCardToLabel").html(gkt.utility.renderLanguageValue(recipientName));
                    let gktGiftCardFromLabel = gkt.$("<label>").addClass("gktGiftCardFromLabel").html(gkt.utility.renderLanguageValue(senderName))
                    let gktGiftCardEmailLabel = gkt.$("<label>").addClass("gktGiftCardEmailLabel").html(gkt.utility.renderLanguageValue(recipientEmail))
                    // let gktGiftCardMessageLabel = gkt.$("<label>").addClass("gktGiftCardMessageLabel").html(giftNote.value)
                    let gktGiftCardDateLabel = gkt.$("<label>").addClass("gktGiftCardDateLabel").html(gkt.utility.renderLanguageValue(deliveryDate))
                        
                    // applyLabelCSS to all of these fields
                    gkt.f.applyLabelCSS(gktGiftCardToLabel)
                    gkt.f.applyLabelCSS(gktGiftCardFromLabel)
                    gkt.f.applyLabelCSS(gktGiftCardEmailLabel)
                    gkt.f.applyLabelCSS(gktGiftCardDateLabel)

                    // create two buttons, detailing Delivery Options
                    let gktDeliveryOptions = gkt.$("<div>").addClass("gktDeliveryOptions")
                    let gktGiftCardSendNowButton = gkt.$("<button>").addClass("gktGiftCardSendNowButton").html(gkt.utility.renderLanguageValue(sendNowButtonText));
                    let gktGiftCardSendLaterButton = gkt.$("<button>").addClass("gktGiftCardSendLaterButton").html(gkt.utility.renderLanguageValue(sendLaterButtonText));
                    
                    
                    // type as button else they autosubmit the form.
                    gktGiftCardSendNowButton.attr("type", "button");
                    
                    gktGiftCardSendLaterButton.attr("type", "button");
                    
                    gktDeliveryOptions.append(gktGiftCardSendNowButton)
                    gktDeliveryOptions.append(gktGiftCardSendLaterButton)
                    // add all of these to the gktGiftCardDateLabel
                    gktGiftCardDateLabel.append(gktDeliveryOptions)

                    gktGiftCardSendNowButton.addClass("activeDeliveryOption");

                    gktGiftCardSendNowButton.css("font-family", gkt.settings.app.themeButtonFontFamily);
                    gktGiftCardSendLaterButton.css("font-family", gkt.settings.app.themeButtonFontFamily);
                    gkt.f.applyButtonCSS(gktGiftCardSendNowButton)
 
                    //add onClickFunctionality to Send Later which opens up a date picker
                    gktGiftCardSendLaterButton.on("click", function () {
                        gktGiftCardDatePicker.css("display", "block");
                        gkt.f.applyButtonCSS(gktGiftCardSendLaterButton);
                        
                        gkt.f.resetButtonCSS(gktGiftCardSendNowButton)
                        gktGiftCardSendLaterButton.addClass("activeDeliveryOption");
                        gktGiftCardSendNowButton.removeClass("activeDeliveryOption");
                        gkt.gktGiftCard.state.giftCardDeliveryOption = "sendLater"
                        gktGiftCardDateLabel.append(gktGiftCardDatePicker).append(gktGiftCardDateValidation)
                    })

                    gktGiftCardSendNowButton.on("click", function () {
                        gktGiftCardDatePicker.css("display", "none");
                        gkt.f.applyButtonCSS(gktGiftCardSendNowButton)
                        //add activeDeliveryOption class to the button
                        gktGiftCardSendNowButton.addClass("activeDeliveryOption");
                        gkt.f.resetButtonCSS(gktGiftCardSendLaterButton)
                        gktGiftCardSendLaterButton.removeClass("activeDeliveryOption");
                        gkt.gktGiftCard.state.giftCardDeliveryOption = "sendNow"
                    })

                    gktGiftCardToLabel.attr("required", true)
                    gktGiftCardFromLabel.attr("required", true)
                    gktGiftCardEmailLabel.attr("required", true)
                    // gktGiftCardMessageLabel.attr("required", true)
                    // add todays date as default value
                    
                    // gktGiftCardDatePicker.attr("value", new Date().toISOString().slice(0, 10))
                    gktGiftCardDatePicker.attr("value", gkt.utility.getLocalDateIn_YYYY_MM_DD());
                    

                    //attach a date min and max value attr to the date picker
                    // gktGiftCardDatePicker.attr("min", new Date().toISOString().slice(0, 10));
                    gktGiftCardDatePicker.attr("min", gkt.utility.getLocalDateIn_YYYY_MM_DD());


                    // and max date is set to the 60 days after
                    // gktGiftCardDatePicker.attr("max", new Date(new Date().getTime() + 60 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10));

                    const _maxDate = new Date(new Date().getTime() + 60 * 24 * 60 * 60 * 1000);
                    gktGiftCardDatePicker.attr("max", gkt.utility.getLocalDateIn_YYYY_MM_DD(_maxDate));

                    // add all of these fields to a div
                    let gktGiftCardInputFieldsDiv = gkt.$("<div>").addClass("gktGiftCardInputFieldsDiv")
                  
                    let gktGiftCardInputReceiverName = gkt.$("<div>").addClass("gktGiftCardInputReceiverName")
                    // let gktGiftCardInputRow1Div1 = gkt.$("<div>").addClass("gktGiftCardInputRow1Div1")
                    // let gktGiftCardInputRow1Div2 = gkt.$("<div>").addClass("gktGiftCardInputRow1Div2")
                    let gktGiftCardInputReceiverEmail = gkt.$("<div>").addClass("gktGiftCardInputReceiverEmail")
                    let gktGiftCardInputRow3Div1 = gkt.$("<div>").addClass("gktGiftCardInputRow3Div1")
                    let gktGiftCardInputSenderName = gkt.$("<div>").addClass("gktGiftCardInputSenderName")

                    let gktGiftCardInputRow5 = gkt.$("<div>").addClass("gktGiftCardInputRow5")

                    // gktGiftCardInputRow1.append(gktGiftCardInputRow1Div1).append(gktGiftCardInputRow1Div2)
                    gktGiftCardInputReceiverName.append(gktGiftCardToLabel).append(gktGiftCardToInputField)
                    gktGiftCardInputReceiverEmail.append(gktGiftCardEmailLabel).append(gktGiftCardEmailInputField).append(gktGiftCardEmailValidation)
                    // gktGiftCardInputRow3Div1.
                    gktGiftCardInputSenderName.append(gktGiftCardFromLabel).append(gktGiftCardFromInputField)
                    gktGiftCardInputRow5.append(gktGiftCardDateLabel)

                    gktGiftCardModalCheckboxLabel.html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.sendToSelfText));
                    
                    gktGiftCardModalCheckbox.append(gktGiftCardInputCheckbox)
                    gktGiftCardModalCheckbox.append(gktCustomCheckboxCheckmarkSmall)
                    gktGiftCardModalCheckbox.append(gktGiftCardModalCheckboxLabel)

                    gktGiftCardInputFieldsDiv.append(gktGiftCardModalCheckboxContainer)
                    gktGiftCardInputFieldsDiv.append(gktGiftCardInputReceiverName)
                    gktGiftCardInputFieldsDiv.append(gktGiftCardInputReceiverEmail)
                    gktGiftCardInputFieldsDiv.append(gktGiftCardInputSenderName)
                    gktGiftCardInputFieldsDiv.append(gktGiftCardInputRow5)

                    return gktGiftCardInputFieldsDiv;
                },
                prepareGiftCardMessage : function (){
                    
                    let gktGiftCardMessage = gkt.$(".gktGiftCardMessageContent");
                    // a label field
                    let gktGiftCardMessageLabel = gkt.$("<label>").addClass("gktGiftCardMessageLabel").attr("for", "gktGiftCardMessage").text(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.giftNote));
                    let gktGiftCardMessageInputField = gkt.$("<textarea>").addClass("gktGiftCardMessageInputField").attr("placeholder", gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.giftNotePlaceholder))
                    let gktVideoMsgButton;


                    gkt.f.applyLabelCSS(gktGiftCardMessageLabel)

                    // create an empty divider to separate the message and the video message button
                    let gktGiftCardMessageDivider = gkt.$("<div>").addClass("gktGiftCardMessageDivider")
                    let gktVideoMsgCheckboxWrapper;
                    let gktVideoMsgCheckboxLabel;
                    if(gkt.settings.videoMessage.isVideoMessagingEnabled ){
                           //gktVideoMsgButton  = gkt.$("<button>").addClass("gktVideoMsgButton").attr("type", "button").text(gkt.settings.languageData.videoMessage.sendVideoMessageText.value);
                            gktVideoMsgButton  = gkt.$("<button>").addClass("gktVideoMsgButton").attr("type", "button").text("Video Msg");
                            gktVideoMsgCheckboxLabel = gkt.$("<label>").addClass("gktVideoMsgCheckboxLabel").attr("for", "gktVideoMsgCheckbox").text(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.recordVideoLabel));
                            // create a label with switch classname
                            
                            gkt.f.applyLabelCSS(gktVideoMsgCheckboxLabel)
                            
                            gktVideoMsgCheckboxWrapper = gkt.$("<label>").addClass("gktVideoMsgCheckboxWrapper").attr("for", "gktVideoMsg")

                            //input which is type of checkbox
                        
                            let gktVideoMsgCheckboxField;

                            // a span which is round and slider css
                            let gktVideoMsgSlider = gkt.$("<span>").addClass("gktVideoMsgSlider").attr("id", "gktVideoMsgSlider");
                            


                            if(gkt.utility.isMobileView()){
                                //create a checkbox and a dropzone to upload a video
                                gktVideoMsgSlider = gkt.$("<span>").addClass("gktVideoMsgSlider_Mobile").attr("id", "gktVideoMsgSlider_Mobile");
                                let gktVideoMessageFileInput = gkt.$("<input>").attr("type", "file").addClass("gktVideoMessageFileInput").attr("id", "gktVideoMessageFileInput").attr("capture", "user").attr("accept", "video/*");
                                // gktVideoMsgCheckboxField = gktVideoMessageFileInput;
                                gktVideoMsgCheckboxField = gkt.$("<input>").addClass("gktVideoMsgCheckboxField_Mobile").attr("type", "checkbox").attr("id", "gktVideoMsg_Mobile");

                                gktVideoMsgSlider.on("click", function(){
                                    gktVideoMsgCheckboxField.trigger("click")
                                    if(gktVideoMsgCheckboxField.is(":checked")){
                                        gktVideoMsgSlider.addClass("gktVideoMsgSliderActive")
                                        gktVideoMessageFileInput.click();
                                    }else{
                                        gktVideoMsgSlider.removeClass("gktVideoMsgSliderActive")
                                        gkt.gktVideoMsg.f.clickClose(event);
                                    }
                                })

                                gktVideoMessageFileInput.on("change", async function({target}){
                                    console.log("file input changed target", target)
                                    if (target.files && target.files.length) {
                                        try {
                                            gkt.gktVideoMsg.f.prepareVideoMsgPlayer()

                                            console.log("target.files[0]", target.files[0])
                                            gkt.gktVideoMsg.state.recordedBlob = target.files[0];
                                            gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording.attr("src",URL.createObjectURL(gkt.gktVideoMsg.state.recordedBlob));
                                            gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording[0].load();
                                            // await gkt.gktVideoMsg.f.covertBlobToBase64(target.files[0]); 
                                            //do something with above data string 
                                            gkt.$('.gktVideoMsgPlayerWrapper').css('display', 'grid')
                                        } catch(error) {
                                            //handle error
                                            console.log(error,"error occured while uploading file")
                                        }
                                        }else{
                                            gktVideoMsgSlider.removeClass("gktVideoMsgSliderActive")
                                            gkt.$('.gktVideoMsgPlayerWrapper').css('display', 'none')
                                        }
                                    })                               
                                //append gktVideoMessageFileInput to gktVideoMsgCheckboxWrapper
                                gktVideoMessageFileInput.css("display", "none");
                                gktVideoMsgCheckboxWrapper.append(gktVideoMessageFileInput);
                         }else{
                            gktVideoMsgCheckboxField = gkt.$("<input>").addClass("gktVideoMsgCheckboxField").attr("type", "checkbox").attr("id", "gktVideoMsg");
                            gktVideoMsgCheckboxField.on("change", function(event){
                                if(gktVideoMsgCheckboxField.is(":checked")){
                                    console.log("it is checked");
                                    gkt.gktVideoMsg.actions.gktVideoMsgButton(event);
                                }else{
                                    gktVideoMsgSlider.removeClass("gktVideoMsgSliderActive")
                                    gkt.gktVideoMsg.f.clickClose(event);
                                }
                            })
                        }
                        gktVideoMsgCheckboxWrapper.append(gktVideoMsgCheckboxField)
                        gktVideoMsgCheckboxWrapper.append(gktVideoMsgSlider)
                    }
                    // gktGiftCardMessageInputField and gktGiftCardMessageLabel are added to same parent div
                    let gktVideoMessageCheckboxRow = gkt.$("<div>").addClass("gktVideoMessageCheckboxRow")
                    gktVideoMessageCheckboxRow.append(gktVideoMsgCheckboxLabel).append(gktVideoMsgCheckboxWrapper)
                    let gktGiftCardMessageInputFieldsDiv = gkt.$("<div>").addClass("gktGiftCardMessageInputFieldsDiv")
                    gktGiftCardMessageInputFieldsDiv.append(gktGiftCardMessageLabel).append(gktGiftCardMessageInputField)
                    gktGiftCardModalBackButton = gkt.gktGiftCard.f.prepareBackButton(gkt.gktGiftCard.f.displayGiftCardDetailsForm);
                    gktGiftCardMessage.append(gktGiftCardModalBackButton);
                    gktGiftCardMessage.append(gktGiftCardMessageInputFieldsDiv)
                    gktGiftCardMessage.append(gktGiftCardMessageDivider)
                    // gktGiftCardMessage.append(gktVideoMsgButton)
                    gktGiftCardMessage.append(gktVideoMessageCheckboxRow)
                    //    gkt.$(".gktGiftCardModalPopupHeading").append(gktGiftCardModalBackButton)


                },
                populateModalNavList : function(){
                    let isGreetingCardEnabled = gkt.settings.greetingCards.isGreetingCardEnabled &&
                                                gkt.settings.greetingCards.greetingCardImgs &&
                                                gkt.settings.greetingCards.greetingCardImgs.length>0;
                    let isSendToSelfChecked =gkt.$(".gktGiftCardModalCheckbox").find("input").is(":checked");
                    if(isGreetingCardEnabled){
                       gkt.gktGiftCard.state.modalNavList.push({id:"GREETING_CARD", name:gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.navigationFields.greetingCardNavItem), visited:false,active:false});
                    }
                    //("Gift Card Details");
                    gkt.gktGiftCard.state.modalNavList.push({id:"GIFT_CARD_DETAILS", name:gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.navigationFields.giftCardDetailsNavItem), visited:false,active:false});
                    if(!isSendToSelfChecked){
                        gkt.gktGiftCard.state.modalNavList.push({id:"GIFT_MESSAGE", name:gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.navigationFields.giftcardMessageNavItem), visited:false,active:false});
                    }
                    
                },
                renderGiftCardModalNav: function(){
                    console.log("rendering gift card modal nav");
                    let gktGiftCardModalNavHTML = gkt.$("<div>").addClass("gktGiftCardModalNav");
                    let gktGiftCardModalNavForMobileHTML = gkt.$("<div>").addClass("gktGiftCardModalNavForMobile");
                    const isGreetingCardEnabled = gkt.settings.greetingCards.isGreetingCardEnabled &&
                                                  gkt.settings.greetingCards.greetingCardImgs &&
                                                  gkt.settings.greetingCards.greetingCardImgs.length>0;
                   
                    if (gkt.gktGiftCard.state.modalNavList.length<1){
                        gkt.gktGiftCard.f.populateModalNavList();
                    }
                    
                    gktGiftCardModalNavList = gkt.gktGiftCard.state.modalNavList;

                    // now create the nav list and append it to the modal nav while attaching a span for ">"
                    for(let i=0; i<gktGiftCardModalNavList.length; i++){
                            let gktGiftCardModalNavListItem = gkt.$("<div>").addClass("gktGiftCardModalNavListItem").html(gktGiftCardModalNavList[i].name);
                            gkt.f.applyHeaderCSS(gktGiftCardModalNavListItem);

                            //if modal the item has visited true then set it as activeNavItem
                            if(gktGiftCardModalNavList[i].visited){
                                gktGiftCardModalNavListItem.addClass("activeNavItem");
                            }
                            
                            let gktGiftCardModalNavListItemSpan;
                            if(i < gktGiftCardModalNavList.length-1){
                                gktGiftCardModalNavListItemSpan  = gkt.$("<div>").addClass("gktGiftCardModalNavListItemSpan").html('<svg class="svg-icon" style="width: 16px; height: 16px;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M682.666667 533.333333a21.333333 21.333333 0 0 1-15.146667-6.186666l-298.666667-298.666667a21.333333 21.333333 0 0 1 30.293334-30.293333l298.666666 298.666666a21.333333 21.333333 0 0 1 0 30.293334A21.333333 21.333333 0 0 1 682.666667 533.333333z" fill="#333333" /><path d="M384 832a21.333333 21.333333 0 0 1-15.146667-6.186667 21.333333 21.333333 0 0 1 0-30.293333l298.666667-298.666667a21.333333 21.333333 0 0 1 30.293333 30.293334l-298.666666 298.666666A21.333333 21.333333 0 0 1 384 832z" fill="#333333" /></svg>');
                            }
                            if(gktGiftCardModalNavList[i].active){
                                gktGiftCardModalNavListItem.addClass("activeNavItem");
                                gktGiftCardModalNavForMobileHTML.html(gktGiftCardModalNavListItem.clone())
                            }                          
                        gktGiftCardModalNavHTML.append(gktGiftCardModalNavListItem)
                        gktGiftCardModalNavHTML.append(gktGiftCardModalNavListItemSpan)
                    }
                    // if gktGiftCardModalNav is not present in the DOM, then append it else replace it
                    if(gkt.$(".gktGiftCardModalNav").length){
                        gkt.$(".gktGiftCardModalNav").replaceWith(gktGiftCardModalNavHTML)
                    }
                    else{
                        gkt.$(".gktGiftCardModalHeader").append(gktGiftCardModalNavHTML)
                    }

                    if(gkt.$(".gktGiftCardModalNavForMobile").length){
                        gkt.$(".gktGiftCardModalNavForMobile").replaceWith(gktGiftCardModalNavForMobileHTML)
                    }
                    else{
                        gkt.$(".gktGiftCardModalHeader").append(gktGiftCardModalNavForMobileHTML)
                    }

                },
                attachEventsToDetailsForm: function () {
                    // cleanup the previous attached events
                    gkt.$(".gktGiftCardContentFooterBtn1").off("click");

                    gkt.$(".gktGiftCardContentFooterBtn1").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.giftcardDetailsButton));
                    gkt.f.applyButtonCSS(gkt.$(".gktGiftCardContentFooterBtn1"));
                    gkt.$(".gktGiftCardContentFooterBtn1").on("click", function (event) {
                        gkt.$(this).attr("disabled", true);
                        setTimeout(() => { gkt.$(this).attr("disabled", false); }, 4000)
                        gkt.gktGiftCard.action.onDetailsSubmit(event)
                    })
                    gkt.gktGiftCard.f.renderGiftCardModalNav();
                    gkt.$(".gktGiftCardContentFooter").append(gkt.gktGiftCard.state.giftCardAddToCartButtonClone)
                },
                attachEventsToGreetingCardForm : function(){
                    // cleanup the previous attached events
                    gkt.$(".gktGiftCardContentFooterBtn1").off("click");

                    gkt.$(".gktGiftCardContentFooterBtn1").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.greetingCardFields.greetingCardContinueButtonText));
                    gkt.f.applyButtonCSS(gkt.$(".gktGiftCardContentFooterBtn1"));
                    gkt.$(".gktGiftCardContentFooterBtn1").on("click", function (event) {
                        gkt.$(this).attr("disabled", true);
                        setTimeout(() => { gkt.$(this).attr("disabled", false); }, 4000)
                        gkt.gktGiftCard.action.onGreetingCardSubmit(event)
                    })
                    // set the first nav item as active
                    gkt.gktGiftCard.f.renderGiftCardModalNav();
                },
                attachEventsToMessageForm : function (){
                    // cleanup the previous attached events
                    gkt.$(".gktGiftCardContentFooterBtn1").off("click");
                    gkt.$(".gktGiftCardContentFooterBtn1").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.buyNowButtonText));
                    gkt.f.applyButtonCSS(gkt.$(".gktGiftCardContentFooterBtn1"));
                    gkt.$(".gktGiftCardContentFooterBtn1").on("click", function (event) {
                        gkt.$(this).attr("disabled", true);
                        setTimeout(() => { gkt.$(this).attr("disabled", false); }, 4000)
                        gkt.$(this).html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.buyNowButtonTextLoading));
                        gkt.gktGiftCard.action.onMessageSubmit(event)
                    })
                    
                    gkt.gktGiftCard.f.renderGiftCardModalNav();
                },
                displayGreetingCardForm:function(){
                    gkt.gktGiftCard.action.hideGiftCardMessageBody();
                    gkt.gktGiftCard.action.hideGiftCardDetailsBody();
                   
                    gkt.gktGiftCard.state.modalNavList.find(function(item){
                        if(item.id == "GREETING_CARD"){
                            item.visited = true;
                            item.active = true;
                        }
                        else{
                            item.active = false;
                        }
                    })
                    gkt.gktGiftCard.action.showGreetingCardBody();
                    gkt.gktGiftCard.f.attachEventsToGreetingCardForm();
                },
                displayGiftCardDetailsForm : function (){
                    gkt.gktGiftCard.action.hideGreetingCardBody();
                    gkt.gktGiftCard.action.hideGiftCardMessageBody();
                    gkt.gktGiftCard.state.modalNavList.find(function(item){
                        if(item.id == "GIFT_CARD_DETAILS"){
                            item.visited = true;
                            item.active = true;
                        }
                        else{
                         item.active = false;
                        }
                    });
                    gkt.gktGiftCard.action.showGiftCardDetailsBody()
                    gkt.gktGiftCard.f.attachEventsToDetailsForm();
                },
                displayMessageForm: function(){
                        gkt.gktGiftCard.action.hideGreetingCardBody();
                        gkt.gktGiftCard.action.hideGiftCardDetailsBody();
                        gkt.gktGiftCard.state.modalNavList.find(function(item){
                            if(item.id == "GIFT_MESSAGE"){
                                item.visited = true;
                                item.active = true;
                            }else{
                                item.active = false;
                            }
                        });
                        //and all the other nav items are inactive

                        gkt.gktGiftCard.action.showGiftCardMessageBody();
                        gkt.gktGiftCard.f.attachEventsToMessageForm();
                },
                validateForm: function () {
                    let isValid = true
                    console.log("validateForm");
                    // run validation on all fields which are visible
                    gkt.$(".gktGiftCardInputFieldsDiv input").each(function () {
                        if(gkt.$(this).is(":visible")){
                            if (gkt.$(this).val().trim() == "") {
                                gkt.$(this).css("border", "1px solid red")
                                isValid = false
                            } else {
                                gkt.$(this).css("border", "1px solid #cccccc")
                            }
                        }
                    })
                    return isValid;
                },
                emailValidation: function (emailString) {
                    var atSymbol = emailString.indexOf("@");
                    if (atSymbol < 1) return false;

                    var dot = emailString.lastIndexOf(".");                    
                    if (dot <= atSymbol + 2) return false;

                    // check that the dot is not at the end
                    if (dot === emailString.length - 1) return false;

                    return true;
                },
                dateValidation : function (date){
                    // if deliveryOption is sendNow then send date should be today
                    if(gkt.gktGiftCard.state.giftCardDeliveryOption == "sendNow"){
                        date = new Date();
                    }
                    // let today = new Date().toISOString().slice(0, 10)
                    let today = gkt.utility.getLocalDateIn_YYYY_MM_DD();
                    // let dateToCompare = new Date(date).toISOString().slice(0, 10)
                    let dateToCompare = gkt.utility.getLocalDateIn_YYYY_MM_DD(new Date(date));
                    if (dateToCompare < today) {
                        return false
                    }
                    // else if (dateToCompare > new Date(new Date().getTime() + 60 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10)) {
                    else if (dateToCompare > gkt.utility.getLocalDateIn_YYYY_MM_DD(new Date(new Date().getTime() + 60 * 24 * 60 * 60 * 1000))) {
                        return false
                    }
                    else {
                        return true
                    }
                },
                performFormValidation : function (e){
                    
                    // let gkGifttCardEmailValueIsValid = gkt.f.validateEmail(gkGifttCardEmailValue)
                    let gkGifttCardEmailValue = gkt.$(".gktGiftCardEmailInputField").val()
                    let gkGifttCardDateValue = gkt.$(".gktGiftCardDatePicker").val()
                    let emailValid = gkt.gktGiftCard.f.emailValidation(gkGifttCardEmailValue);
                    let isFormValid = gkt.gktGiftCard.f.validateForm();
                    let dateValid = gkt.gktGiftCard.f.dateValidation(gkGifttCardDateValue);
                    if (isFormValid && emailValid && dateValid) {
                        gkt.$(".gktGiftCardContentFooterBtn1").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.buyNowButtonTextLoading));
                        return true;
                    } else if (!emailValid) {
                        //TODO
                        gkt.$(".gktGiftCardEmailValidation").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.emailValidationError));
                        return;
                    }else if (!dateValid){
                        gkt.$(".gktGiftCardDateValidation").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.purchasePageFields.dateValidationError));
                        return;
                    }
                    else {
                       return;
                    }

                },
            },
            action: {
                giftCardAddToCartButton: async function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    gkt.gktGiftCard.f.openGiftCardModal()

                    console.log("giftCardAddToCartButton-clicked")
                },
                onModalClose: function (e) {
                    // hide the modal
                    gkt.$(".gktGiftCardModalWrapper").hide();
                },
                onModalBack:function(e){
                    gkt.gktGiftCard.action.showGreetingCardBody()
                    gkt.gktGiftCard.action.hideGiftCardDetailsBody()
                },
                removeCheckmarkDivsFromSiblings: function(element){
                    element.siblings().find(".gkt_checkmark").remove()
                    element.siblings().removeClass("activeGreetingCard")             
                },
                addCheckMarkDivs: function (element) {
                    let checkMarkDiv = gkt.$("<span>").addClass("gkt_checkmark")
                    checkMarkDiv.append(gkt.$("<div>").addClass("gkt_checkmark_circle"))
                    checkMarkDiv.append(gkt.$("<div>").addClass("gkt_checkmark_stem"))
                    checkMarkDiv.append(gkt.$("<div>").addClass("gkt_checkmark_kick"))
                    element.append(checkMarkDiv)
                },
                onGreetingCardImageClick : function(image){
                    // Pass either the image or just trigger this as a callback on Onclick
                    let imageSrc;
                    if (false) {
                        imageSrc = image
                        
                    } else {
                        imageSrc = gkt.$(this).find("img").attr("src")
                    }
                      console.log("onclick triggered")
                    // gkt.$('.greetingCardImagePreview').attr("src", imageSrc)
                    gkt.gktGiftCard.state.greetingCardActiveImageSrc = imageSrc

                    gkt.$(this).find("input").prop("checked", true)
                    gkt.$(this).addClass("activeGreetingCard")
                    // add an icon on top of it
                    gkt.gktGiftCard.action.addCheckMarkDivs(gkt.$(this))
                    gkt.gktGiftCard.action.removeCheckmarkDivsFromSiblings(gkt.$(this))

                },
                onGreetingCardCategoryClick : function(){
                    // empty the active state greeting card
                    console.log("onGreetingCardCategoryClick");
                    gkt.$(this).addClass("activeGreetingCardCategory")
                    // remove activeCategory class from other categories
                    gkt.$(this).siblings().removeClass("activeGreetingCardCategory")
                    gkt.gktGiftCard.f.changeGreetingCardImageList(gkt.gktGiftCard.state.greetingCardSelectedCategory);
                },
                onSendSelfClick : function(){
                    // todo
                    let isSendToSelfChecked =gkt.$(".gktGiftCardModalCheckbox").find("input").is(":checked");
                    if(!isSendToSelfChecked){
                        gkt.$(".gktGiftCardInputSenderName").show();
                        gkt.$(".gktGiftCardInputReceiverName").show();
                        //find id GIFT_MESSAGE if not found then push
                        if (gkt.gktGiftCard.state.modalNavList.indexOf("GIFT_MESSAGE") == -1) {
                            gkt.gktGiftCard.state.modalNavList.push({id:"GIFT_MESSAGE",name:gkt.utility.renderLanguageValue(gkt.settings.languageData.giftcardV2.navigationFields.giftcardMessageNavItem),visited:false,active:false})
                        }
                    }
                    else{
                        gkt.$(".gktGiftCardInputSenderName").hide();
                        gkt.$(".gktGiftCardInputReceiverName").hide();
                        gkt.gktGiftCard.state.modalNavList.find(function(element){
                        if(element.id == "GIFT_MESSAGE"){
                            gkt.gktGiftCard.state.modalNavList.splice(gkt.gktGiftCard.state.modalNavList.indexOf(element),1)
                        }
                    })
                    }
                    //remove array element assoicated with the id = GIFT_MESSAGE in gkt.gktgiftCard.state.modalNavList
                    
                    gkt.gktGiftCard.f.renderGiftCardModalNav();
                },
                onMessageSubmit: async function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    let greetingCardSelected = undefined;
                    let categorySelected = "";
                    if(gkt.settings.greetingCards.isGreetingCardEnabled){
                     greetingCardSelected = gkt.gktGiftCard.state.greetingCardActiveImageSrc;
                     categorySelected = gkt.gktGiftCard.state.greetingCardSelectedCategory;
                    }
                    // TODO: Do we need a validation for the form on the final page aswell?
                    let selectedVariantId = gkt.f.getSelectedVariant()
                    let quantity = gkt.f.getProductQuantity()
                    let gkGifttCardFromValue = gkt.$(".gktGiftCardFromInputField").val()
                    let gkGifttCardToValue = gkt.$(".gktGiftCardToInputField").val()
                    let gkGifttCardMessageValue = gkt.$(".gktGiftCardMessageInputField").val()
                    let gkGifttCardEmailValue = gkt.$(".gktGiftCardEmailInputField").val()
                    // if sendNow then set date to today
                    let gkGifttCardDateValue = gkt.$(".gktGiftCardDatePicker").val()
                    // check if deliveryOption is set to sendNow, if yes then reassign date to today
                    if (gkt.gktGiftCard.state.giftCardDeliveryOption == "sendNow") {
                        gkGifttCardDateValue = new Date().toISOString().slice(0, 10);
                    }

                    const isSendToSelfChecked = gkt.$(".gktGiftCardModalCheckbox").find("input").is(":checked");

                    if(isSendToSelfChecked){
                        gkGifttCardFromValue = null;
                        gkGifttCardToValue = null;
                    }
                    if(gkt.$(".gktVideoMsgCheckboxField").is(":checked")!=true && gkt.$(".gktVideoMsgCheckboxField_Mobile").is(":checked")!=true){
                        gkt.gktVideoMsg.state.uploadedVideoId = null;
                    }
                    //redirectUrlForSendGiftcardBtn includes cart keyword
                    if(gkt.settings.app.redirectUrlForSendGiftcardBtn.includes("checkout")){
                        let clearCart = await gkt.utility.clearCart()
                    }

                    let resAddToCart = await gkt.utility.addToCartV2({
                        "items": [
                            {
                                "id": selectedVariantId,
                                "quantity": quantity ? quantity : 1,
                                "properties": {
                                    "To": gkGifttCardToValue,
                                    "From": gkGifttCardFromValue,
                                    "Note": gkGifttCardMessageValue,
                                    "Recipient Email": gkGifttCardEmailValue,
                                    "Delivery Date": gkGifttCardDateValue,
                                    "_Greeting Card Image": greetingCardSelected,
                                    "Greeting Card Selected": greetingCardSelected? "yes" : null,
                                    "Video Recorded" : gkt.gktVideoMsg.state.uploadedVideoId ? "yes": null,
                                    "_Video Id": gkt.gktVideoMsg.state.uploadedVideoId,
                                    "_Send To Myself": isSendToSelfChecked

                                }
                            }
                        ],
                    })
                    


                    window.location.href = gkt.settings.app.redirectUrlForSendGiftcardBtn

                    console.log("onMessageSubmit-clicked")
                },
                onGreetingCardSubmit: async function (e){
                    e.preventDefault();
                    e.stopPropagation();
                    let greetingCardSelected = gkt.gktGiftCard.state.greetingCardActiveImageSrc;
                    let categorySelected = gkt.gktGiftCard.state.greetingCardSelectedCategory;

                    gkt.gktGiftCard.f.displayGiftCardDetailsForm();
                },
                onDetailsSubmit: async function (e){
                    e.preventDefault();
                    console.log("onDetailsSubmit-clicked")
                    let formValid = gkt.gktGiftCard.f.performFormValidation();
                    let isSendToSelfChecked = gkt.$(".gktGiftCardModalCheckbox").find("input").is(":checked");

                    if(formValid){
                        if(isSendToSelfChecked){
                            gkt.gktGiftCard.action.onMessageSubmit(e);
                            return;
                        }
                        gkt.gktGiftCard.f.displayMessageForm();
                    }
                    else return;
                },
                hideGreetingCardBody: function () {
                    gkt.$(".gktGiftCardGreetingCardContent").hide();

                },
                showGreetingCardBody: function () {
                    gkt.$(".gktGiftCardGreetingCardContent").show();
                },
                showGiftCardDetailsBody: function () {
                    gkt.$(".gktGiftCardDetailsContent").show();
                },
                hideGiftCardDetailsBody: function () {
                    gkt.$(".gktGiftCardDetailsContent").hide();
                },
                hideGiftCardMessageBody: function () {
                    gkt.$(".gktGiftCardMessageContent").hide();
                },
                showGiftCardMessageBody: function () {
                    gkt.$(".gktGiftCardMessageContent").show();
                },
            },
        },
        gktAccountWidget: {
            state: {
                isLoading: null,
            },
            init: function (settings, parent) {
                if(shopifyLiquidValues && shopifyLiquidValues.customer && shopifyLiquidValues.customer.id){
                    gkt.gktAccountWidget.initialize(settings, parent)
                }
            },
            initialize: function (settings, parent) {
                let {isEnabledOnCartPage} = gkt.gktAccountWidget.f.checkifAccountWidgetEnabled()
                if (parent == "CART_PAGE" && isEnabledOnCartPage){
                    let accountWidgetCartPageHTML = gkt.gktAccountWidget.f.prepareUI()
                    gkt.gktAccountWidget.f.insertIntoCartPageWrapper(settings, accountWidgetCartPageHTML)
                }
                gkt.utility.dynamicStylesForBranding();
            },
            f: {
                checkifAccountWidgetEnabled: function () {

                    let isEnabledOnCartPage = false;
                    //isEnabledOnCartPage is the only one that matters
                    if (gkt.settings.accountWidget.isEnabled){
                        isEnabledOnCartPage = true
                    }
                    return {isEnabledOnCartPage}
                    
                },
                prepareWidgetModal: function () {

                    let modalWrapper;
                    if(gkt.$(".gktAccountWidgetModal").length == 0){
                        modalWrapper = gkt.$("<div>").addClass("gktAccountWidgetModal")
                    }  else{
                        modalWrapper = gkt.$(".gktAccountWidgetModal")
                        modalWrapper.html(" ");
                    }

                    let modalContent = gkt.$("<div>").addClass("gktAccountWidgetModalContent")

                    let closeButtonSvg = '<svg width="16px" height="16px" enable-background="new 0 0 587.91 587.91" version="1.1" viewBox="0 0 587.91 587.91" xml:space="preserve" xmlns="http://www.w3.org/2000/svg"><path d="m86.451 501.46c26.937 26.936 58.315 48.088 93.265 62.871 36.207 15.314 74.642 23.078 114.24 23.078 39.596 0 78.032-7.764 114.24-23.078 34.949-14.783 66.328-35.936 93.266-62.871 26.936-26.938 48.09-58.316 62.871-93.266 15.314-36.207 23.08-74.643 23.08-114.24 0-39.598-7.766-78.033-23.08-114.24-14.781-34.95-35.936-66.328-62.871-93.265-26.938-26.937-58.316-48.09-93.266-62.872-36.208-15.315-74.643-23.079-114.24-23.079-39.597 0-78.032 7.765-114.24 23.079-34.95 14.782-66.328 35.936-93.265 62.872s-48.09 58.315-62.873 93.264c-15.313 36.207-23.078 74.642-23.078 114.24 0 39.596 7.765 78.031 23.079 114.24 14.782 34.95 35.936 66.328 62.872 93.266zm207.5-458.12c138.41 0 250.61 112.2 250.61 250.62 0 138.41-112.2 250.61-250.61 250.61s-250.62-112.2-250.62-250.61c0-138.41 112.2-250.62 250.62-250.62z"/><path d="m293.96 587.91c-39.667 0-78.167-7.778-114.43-23.117-35.01-14.809-66.442-35.998-93.423-62.979-26.983-26.984-48.172-58.417-62.979-93.425-15.341-36.269-23.119-74.77-23.119-114.43 0-39.663 7.778-78.165 23.118-114.44 14.807-35.008 35.997-66.44 62.979-93.423s58.415-48.172 93.423-62.979c36.27-15.34 74.771-23.118 114.43-23.118 39.666 0 78.167 7.778 114.43 23.119 35.009 14.807 66.441 35.997 93.425 62.979 26.984 26.985 48.173 58.417 62.979 93.423 15.341 36.27 23.119 74.771 23.119 114.43 0 39.662-7.778 78.163-23.119 114.43-14.806 35.007-35.994 66.439-62.979 93.425-26.982 26.98-58.415 48.169-93.425 62.979-36.266 15.338-74.767 23.116-114.43 23.116zm0-586.91c-39.529 0-77.898 7.751-114.04 23.039-34.889 14.757-66.215 35.874-93.106 62.765-26.892 26.892-48.009 58.217-62.766 93.105-15.288 36.147-23.039 74.517-23.039 114.05 0 39.527 7.751 77.898 23.039 114.04 14.757 34.889 35.874 66.214 62.766 93.106 26.89 26.889 58.215 48.006 93.106 62.765 36.142 15.287 74.512 23.038 114.04 23.038s77.901-7.751 114.04-23.039c34.89-14.758 66.216-35.875 93.106-62.764 26.893-26.895 48.009-58.22 62.764-93.106 15.289-36.146 23.041-74.516 23.041-114.04 0-39.529-7.752-77.899-23.041-114.04-14.754-34.887-35.871-66.212-62.764-93.106-26.892-26.891-58.218-48.008-93.106-62.765-36.144-15.289-74.514-23.04-114.04-23.04zm0 544.07c-67.075 0-130.14-26.12-177.56-73.549-47.429-47.43-73.55-110.49-73.55-177.56s26.12-130.14 73.55-177.56c47.429-47.429 110.49-73.55 177.56-73.55s130.14 26.121 177.56 73.55c47.43 47.43 73.55 110.49 73.55 177.56s-26.12 130.14-73.55 177.56c-47.429 47.429-110.49 73.549-177.56 73.549zm0-501.23c-66.808 0-129.62 26.017-176.86 73.257-47.24 47.241-73.257 110.05-73.257 176.86s26.017 129.62 73.257 176.86c47.24 47.24 110.05 73.257 176.86 73.257s129.62-26.017 176.86-73.257c47.24-47.239 73.257-110.05 73.257-176.86 0-66.808-26.017-129.62-73.257-176.86-47.241-47.241-110.05-73.257-176.86-73.257z"/><path d="m184.92 402.99c4.183 4.184 9.664 6.275 15.146 6.275s10.964-2.092 15.146-6.275l78.742-78.742 78.743 78.742c4.182 4.184 9.664 6.275 15.146 6.275s10.963-2.092 15.146-6.275c8.365-8.363 8.365-21.926 0-30.291l-78.744-78.742 78.742-78.743c8.365-8.365 8.365-21.928 0-30.292-8.363-8.365-21.926-8.365-30.291 0l-78.743 78.743-78.742-78.743c-8.365-8.365-21.928-8.365-30.292 0-8.365 8.365-8.365 21.927 0 30.292l78.743 78.743-78.743 78.742c-8.364 8.365-8.364 21.928 1e-3 30.291z"/><path d="m387.84 409.76c-5.856 0-11.36-2.28-15.5-6.422l-78.389-78.389-78.388 78.389c-4.14 4.142-9.645 6.422-15.5 6.422s-11.36-2.28-15.5-6.422c-4.14-4.14-6.42-9.644-6.42-15.498 0-5.855 2.28-11.359 6.42-15.5l78.389-78.389-78.389-78.389c-8.546-8.547-8.546-22.453 0-31 4.14-4.14 9.644-6.42 15.5-6.42 5.855 0 11.36 2.28 15.5 6.42l78.389 78.389 78.389-78.389c4.141-4.14 9.645-6.42 15.5-6.42 5.854 0 11.358 2.28 15.498 6.42 4.141 4.14 6.42 9.645 6.42 15.5s-2.279 11.36-6.42 15.5l-78.389 78.389 78.391 78.389c4.141 4.141 6.421 9.645 6.421 15.5 0 5.854-2.28 11.358-6.421 15.498-4.143 4.141-9.647 6.422-15.501 6.422zm-93.889-86.225 79.096 79.096c3.95 3.952 9.204 6.129 14.793 6.129 5.587 0 10.841-2.177 14.793-6.129 3.951-3.95 6.128-9.203 6.128-14.791s-2.177-10.842-6.128-14.793l-79.098-79.096 79.096-79.096c3.951-3.951 6.127-9.205 6.127-14.793s-2.176-10.841-6.127-14.792c-3.95-3.951-9.203-6.127-14.791-6.127s-10.842 2.176-14.793 6.127l-79.096 79.096-79.096-79.096c-3.951-3.951-9.205-6.127-14.793-6.127s-10.841 2.176-14.792 6.127c-8.156 8.157-8.156 21.428 0 29.585l79.096 79.096-79.096 79.096c-3.951 3.951-6.127 9.205-6.127 14.793s2.176 10.841 6.127 14.791c3.952 3.952 9.205 6.129 14.793 6.129s10.841-2.177 14.793-6.129l79.095-79.096z"/></svg>'
                    let modalCloseBtn = gkt.$("<div>").addClass("gktAccountWidgetModalClose").append(closeButtonSvg)


                    modalCloseBtn.on("click", gkt.gktAccountWidget.action.closeAccountWidgetModal)


                    let gktAccountWidgetRewardDetailsHTML  = gkt.gktAccountWidget.f.prepareRewardGiftCardDetails()

                    let gktAccountWidgetBuyWithRewardsButton = gkt.gktAccountWidget.f.prepareBuyWithRewardsButton()
                    
                    let gktAccountWidgetBody = gkt.$("<div>").addClass("gktAccountWidgetBody")

                    // let gktAccountWidgetTabs = two tabs - rewards and gift cards

                    let gktAccountWidgetBodyTabs = gkt.$("<div>").addClass("gktAccountWidgetBodyTabs")

                    let gktAccountWidgetBodyTabRewards = gkt.$("<div>").addClass("gktAccountWidgetBodyTabRewards").text(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.rewardSection.rewardsTabText))

                    let gktAccountWidgetBodyTabGiftCards = gkt.$("<div>").addClass("gktAccountWidgetBodyTabGiftCards").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.giftcardSection.giftCardsTabText))

                    gkt.gktAccountWidget.f.applySubTextColorCSS(gktAccountWidgetBodyTabs);


                    gktAccountWidgetBodyTabs.append(gktAccountWidgetBodyTabRewards)
                    gktAccountWidgetBodyTabs.append(gktAccountWidgetBodyTabGiftCards)

                    //gktAccountWidgetBodyTabs write css, add event listeners

                    gktAccountWidgetBodyTabRewards.on("click", gkt.gktAccountWidget.action.showRewardSection);
                    gktAccountWidgetBodyTabGiftCards.on("click", gkt.gktAccountWidget.action.showGiftCardSection);


                    gktAccountWidgetBody.append(gktAccountWidgetBodyTabs)

                    let gktAccountWidgetRewardSection = gkt.gktAccountWidget.f.prepareRewardSection()
                    let gktAccountWidgetGiftCardSection = gkt.gktAccountWidget.f.prepareGiftCardSection()

                    gktAccountWidgetBody.append(gktAccountWidgetRewardSection)
                    gktAccountWidgetBody.append(gktAccountWidgetGiftCardSection)

                    // gktAccountWidgetBody.append(gktAccountWidgetGiftCardSection)
                    // gktAccountWidgetRewardDetails.append(gktAccountWidgetBuyWithRewardsButton)
                    modalContent.append(gktAccountWidgetRewardDetailsHTML)
                    modalContent.append(gktAccountWidgetBuyWithRewardsButton)
                    modalContent.append(gktAccountWidgetBody)
                    modalWrapper.append(modalCloseBtn)
                    modalWrapper.append(modalContent)
                    modalWrapper.append(gkt.f.preparePoweredByBannerUI())
                    
                    return modalWrapper;
                },
                fetchLoggedInUserAndUpdateUI: async function () {
                    gkt.gktAccountWidget.state.isLoading = true;
                    
                    //this is to show loading spinner
                    gkt.gktAccountWidget.f.reRenderModalUI();

                    await gkt.f.getLoggedInCustomer();
                    gkt.gktAccountWidget.state.isLoading = false;
                    gkt.gktAccountWidget.f.reRenderModalUI();
                },
                prepareUI: function () {
                    //a div which is has properties of a button and on click, it opens a modal
                    let accountWidgetHTML = gkt.$("<div>");
                    let widgetActivator = gkt.$("<div>").addClass("gktAccountWidgetActivator");
                    gkt.gktAccountWidget.f.applyButtonCSS(widgetActivator);
                    widgetActivator.text(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.generalSettings.accountWidgetDisplayText) || "Account Widget")
                    //css -> cursor: pointer
                    widgetActivator.css("cursor", "pointer");
                    widgetActivator.on("click", gkt.gktAccountWidget.action.openAccountWidgetModal)

                    let widgetModalWrapper = gkt.$("<div>").addClass("gktAccountWidgetModalWrapper")
                    widgetModalWrapper.append(gkt.gktAccountWidget.f.prepareWidgetModal())


                    accountWidgetHTML.append(widgetActivator)
                    console.log("prepare ui called")
                    gkt.$("body").append(widgetModalWrapper)


                    return accountWidgetHTML;
                },
                prepareRewardGiftCardDetails: function () {
                    let gktAccountWidgetRewardDetails;
                    if(gkt.$(".gktAccountWidgetRewardDetails").length > 0) {
                        gkt.$(".gktAccountWidgetRewardDetails").html(" ")
                        gktAccountWidgetRewardDetails = gkt.$(".gktAccountWidgetRewardDetails")
                    } else {
                         gktAccountWidgetRewardDetails  = gkt.$("<div>").addClass("gktAccountWidgetRewardDetails")
                    }
                    let generalSettingsLanguageData = gkt.settings.languageData.accountWidget.generalSettings;
                    let gktAccountWidgetRewardBalance = gkt.$("<div>").addClass("gktAccountWidgetRewardBalance").html( gkt.utility.renderLanguageValue(generalSettingsLanguageData.rewardBalanceLabel)|| "Reward Balance 1")

                    gkt.gktAccountWidget.f.applyMainTextColorCSS(gktAccountWidgetRewardBalance)
                    // now another span with value of the balance 
                    let gktAccountWidgetRewardBalanceValue = gkt.$("<span>").addClass("gktAccountWidgetRewardBalanceValue");

                    let rewardBalanceValue = `--`;
                    if(gkt.gktAccountWidget.state.isLoading == false){
                        if (gkt.settings.customer && gkt.settings.customer.rewardgiftcard && gkt.settings.customer.rewardgiftcard.balance) {
                            rewardBalanceValue = `${gkt.settings.merchantInfo.currencyInfo.code} ${gkt.settings.customer.rewardgiftcard.balance}`
                        }else {
                            rewardBalanceValue  =  `${gkt.settings.merchantInfo.currencyInfo.code} 0`
                        }
                    }


                    gkt.gktAccountWidget.f.applySubTextColorCSS(gktAccountWidgetRewardBalanceValue)

                    gktAccountWidgetRewardBalanceValue.text(rewardBalanceValue)

                    gktAccountWidgetRewardBalance.append(gktAccountWidgetRewardBalanceValue)

                    let gktRewardCode = gkt.$("<div>").addClass("gktRewardCode").text( gkt.utility.renderLanguageValue(generalSettingsLanguageData.rewardCodeLabel) || "Reward Code 1")

                    let gktAccountWidgetRewardCodeValue = gkt.$("<span>").addClass("gktAccountWidgetRewardCodeValue");

                    gkt.gktAccountWidget.f.applySubTextColorCSS(gktAccountWidgetRewardCodeValue)

                    
                    let rewardCodeValue  = "----";
                    
                    if(gkt.gktAccountWidget.state.isLoading == false &&  gkt.settings.customer && gkt.settings.customer.rewardgiftcard && gkt.settings.customer.rewardgiftcard.decryptCode){
                        rewardCodeValue = gkt.settings.customer.rewardgiftcard.decryptCode;
                    }

                    gkt.gktAccountWidget.f.applyMainTextColorCSS(gktRewardCode)

                    gktAccountWidgetRewardCodeValue.text(rewardCodeValue)

                    gktRewardCode.append(gktAccountWidgetRewardCodeValue)


                    // let gktAccountWidgetRewardCodeCopyBtn = gkt.$("<div>").addClass("gktAccountWidgetRewardCodeCopyBtn").html("Copy")
                    // gktAccountWidgetRewardCodeCopyBtn.on("click", gkt.gktAccountWidget.action.copyRewardCode)
                    // gktRewardCode.append(gktAccountWidgetRewardCodeCopyBtn)


                    gktAccountWidgetRewardDetails.append(gktAccountWidgetRewardBalance)
                    gktAccountWidgetRewardDetails.append(gktRewardCode)
                    return gktAccountWidgetRewardDetails;
                },
                prepareRewardSection: function () {

                    let gktAccountWidgetRewardSection;
                    if(gkt.$(".gktAccountWidgetRewardSection").length > 0){
                        gktAccountWidgetRewardSection = gkt.$(".gktAccountWidgetRewardSection");
                        gkt.$(".gktAccountWidgetRewardSection").html(" ")
                    }else{
                        gktAccountWidgetRewardSection = gkt.$("<div>").addClass("gktAccountWidgetRewardSection")
                    }

                    let gktAccountWidgetRewardSectionBody = gkt.$("<div>").addClass("gktAccountWidgetRewardSectionBody")

                    let rewardSectionLanguageData = gkt.settings.languageData.accountWidget.rewardSection;

                    let gktAccountWidgetRewardSectionBodyListHTML = gkt.$("<div>").addClass("gktAccountWidgetRewardSectionBodyList")
                    
                    if(gkt.gktAccountWidget.state.isLoading == false ){
                        let rewardTransactions =  gkt.settings.customer ? gkt.settings.customer.rewardgiftcardTransaction : [];
    
                        let gktAccountWidgetRewardSectionBodyListHeader = gkt.$("<div>").addClass("gktAccountWidgetRewardSectionBodyListHeader")
    
                        let gktAccountWidgetHeaderForCode =  gkt.$("<div>").addClass("gktAccountWidgetHeaderForCode").text(gkt.utility.renderLanguageValue(rewardSectionLanguageData.balanceHeaderLabel) || "Balance" )
                        let gktAccountWidgetHeaderForExpirationDate =  gkt.$("<div>").addClass("gktAccountWidgetHeaderForExpirationDate").text(gkt.utility.renderLanguageValue(rewardSectionLanguageData.expirationDateLabel)|| "Exp. Date1" )
                        let gktAccountWidgetHeaderForRemarks =  gkt.$("<div>").addClass("gktAccountWidgetHeaderForRemarks").text(gkt.utility.renderLanguageValue(rewardSectionLanguageData.remarksLabel) || "Remarks 1")
    
                        gktAccountWidgetRewardSectionBodyListHeader.append(gktAccountWidgetHeaderForCode)
                        gktAccountWidgetRewardSectionBodyListHeader.append(gktAccountWidgetHeaderForExpirationDate)
                        gktAccountWidgetRewardSectionBodyListHeader.append(gktAccountWidgetHeaderForRemarks)
    
                        
                        gktAccountWidgetRewardSectionBodyListHTML.append(gktAccountWidgetRewardSectionBodyListHeader)
                        


                        if(rewardTransactions.length > 0){
                            rewardTransactions.forEach(function (rewardTransaction) {
                                let expiryDateFormatted = ' - ';
                                if(rewardTransaction.expiryDate){
                                    expiryDateFormatted = rewardTransaction.expiryDate && rewardTransaction.expiryDate.length  > 10 ?  rewardTransaction.expiryDate.substring(0,10) : rewardTransaction.expiryDate;
                                }
                                let minusSymbol = rewardTransaction.action == "Remove"  ? " -" : " ";
                                let balanceFormatted = rewardTransaction.currency + minusSymbol + parseFloat(rewardTransaction.amount).toFixed(2);
                                let gktAccountWidgetRewardSectionBodyListItem = gkt.$("<div>").addClass("gktAccountWidgetRewardSectionBodyListItem")
                                let balanceFieldDiv = gkt.$("<div>").addClass("gktAccountWidgetRewardSectionBodyListItemBalance").html(balanceFormatted)
                                if(rewardTransaction.action == "Remove"){
                                    balanceFieldDiv.addClass("gktAccountWidgetRewardSectionBodyListItemBalanceRemove")
                                    expiryDateFormatted = " - "
                                }
                                gktAccountWidgetRewardSectionBodyListItem.append(balanceFieldDiv)
                                gktAccountWidgetRewardSectionBodyListItem.append(gkt.$("<div>").addClass("gktAccountWidgetRewardSectionBodyListItemExpirationDate").html(expiryDateFormatted || "-"))
                                gktAccountWidgetRewardSectionBodyListItem.append(gkt.$("<div>").addClass("gktAccountWidgetRewardSectionBodyListItemRemarks").html(rewardTransaction.note).text())
                                gktAccountWidgetRewardSectionBodyListHTML.append(gktAccountWidgetRewardSectionBodyListItem)
                                gkt.gktAccountWidget.f.applyMainTextColorCSS(gktAccountWidgetRewardSectionBodyListItem);
                            })
        
                            gkt.gktAccountWidget.f.applySubTextColorCSS(gktAccountWidgetRewardSectionBodyListHeader);
                        }else{
                            //handle empty state
                            let noRewardFound = gkt.gktAccountWidget.f.prepareEmptyStateForRewardSection();
                            gktAccountWidgetRewardSectionBodyListHTML.html(noRewardFound)
                        }
                        gktAccountWidgetRewardSectionBody.append(gktAccountWidgetRewardSectionBodyListHTML)
                    }else{
                        gktAccountWidgetRewardSectionBody.html(gkt.utility.displayLoadingSpinner())
                    }
                    
                    gktAccountWidgetRewardSection.append(gktAccountWidgetRewardSectionBody)

                    return gktAccountWidgetRewardSection

                },
                prepareGiftCardSection: function () {
                    let gktAccountWidgetGiftCardSection;

                    if(gkt.$(".gktAccountWidgetGiftCardSection").length > 0){
                        gktAccountWidgetGiftCardSection = gkt.$(".gktAccountWidgetGiftCardSection");
                        gkt.$(".gktAccountWidgetGiftCardSection").html(" ")
                    }else{
                        gktAccountWidgetGiftCardSection  = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSection")
                    }

                    let giftcardSectionLanguageData = gkt.settings.languageData.accountWidget.giftcardSection;

                    let gktAccountWidgetGiftCardSectionBodyListHTML = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionBodyList")
                    if(gkt.gktAccountWidget.state.isLoading == false){
                        const customerGiftCards = gkt.settings.customer.giftcards;

                        if(customerGiftCards.length > 0){
                            
                            gkt.gktAccountWidget.state.activeTabFn = gkt.gktAccountWidget.action.showGiftCardSection;
                            let gktAccountWidgetGiftCardSectionListHeader = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionListHeader")
        
                            let gktAccountWidgetGiftCardSectionListHeaderForCode = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionListHeaderForCode").html(gkt.utility.renderLanguageValue(giftcardSectionLanguageData.codeHeaderLabel)||"Code1" )
        
                            let gktAccountWidgetGiftCardSectionListHeaderForBalance = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionListHeaderForBalance").html( gkt.utility.renderLanguageValue(giftcardSectionLanguageData.balanceHeaderLabel) || "Balance1")
        
                            let gktAccountWidgetGiftCardSectionListHeaderForExpirationDate = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionListHeaderForExpirationDate").html(gkt.utility.renderLanguageValue(giftcardSectionLanguageData.expirationDateLabel)|| "Exp. Date1")
        
                            let gktAccountWidgetGiftCardSectionListHeaderForAction = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionListHeaderForAction").html( gkt.utility.renderLanguageValue(giftcardSectionLanguageData.actionHeaderLabel)|| "Action1")
        
                            gktAccountWidgetGiftCardSectionListHeader.append(gktAccountWidgetGiftCardSectionListHeaderForCode)
                            gktAccountWidgetGiftCardSectionListHeader.append(gktAccountWidgetGiftCardSectionListHeaderForBalance)
                            gktAccountWidgetGiftCardSectionListHeader.append(gktAccountWidgetGiftCardSectionListHeaderForExpirationDate)
                            gktAccountWidgetGiftCardSectionListHeader.append(gktAccountWidgetGiftCardSectionListHeaderForAction)
        
                            gktAccountWidgetGiftCardSectionBodyListHTML.append(gktAccountWidgetGiftCardSectionListHeader)

                            customerGiftCards.forEach(function (customerGiftCard) {
                                let gktAccountWidgetGiftCardSectionBodyListItem = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionBodyListItem")
                                let gktAccountWidgetGiftCardSectionBodyListItemForCode = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionBodyListItemForCode").html("**" + customerGiftCard.code)
                                let gktAccountWidgetGiftCardSectionBodyListItemForBalance = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionBodyListItemForBalance").html(`${gkt.settings.merchantInfo.currencyInfo.code} ${customerGiftCard.balance}`)
                                let gktAccountWidgetGiftCardSectionBodyListItemForExpirationDate = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionBodyListItemForExpirationDate").html(customerGiftCard.expiresOn || "-" )
                                let gktAccountWidgetGiftCardSectionBodyListItemForAddToAccount = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionBodyListItemForAddToAccount");
                               
                            

                                if(customerGiftCard.gktGiftcardId){
                                    let addToAccountButton = gkt.$("<div>").addClass("gktAccountWidgetGiftCardSectionBodyListItemForAddToAccountButton").html( gkt.utility.renderLanguageValue(giftcardSectionLanguageData.addToAccountButtonText)|| "Add To Account1");
                                    //attach data attribute to the button
                                    gktAccountWidgetGiftCardSectionBodyListItemForAddToAccount.append(addToAccountButton)
                                    gkt.gktAccountWidget.f.applyButtonCSS(addToAccountButton);

                                    gktAccountWidgetGiftCardSectionBodyListItemForAddToAccount.attr("data-giftcard-id", customerGiftCard.gktGiftcardId);
                                    gktAccountWidgetGiftCardSectionBodyListItemForAddToAccount.on("click", gkt.gktAccountWidget.action.addGiftCardToRewardCode)
                                }
                                gktAccountWidgetGiftCardSectionBodyListItem.append(gktAccountWidgetGiftCardSectionBodyListItemForCode)
                                gktAccountWidgetGiftCardSectionBodyListItem.append(gktAccountWidgetGiftCardSectionBodyListItemForBalance)
                                gktAccountWidgetGiftCardSectionBodyListItem.append(gktAccountWidgetGiftCardSectionBodyListItemForExpirationDate)
                                gktAccountWidgetGiftCardSectionBodyListItem.append(gktAccountWidgetGiftCardSectionBodyListItemForAddToAccount)
                                gktAccountWidgetGiftCardSectionBodyListHTML.append(gktAccountWidgetGiftCardSectionBodyListItem)
                            })

                            gkt.gktAccountWidget.f.applySubTextColorCSS(gktAccountWidgetGiftCardSectionListHeader);
                            gktAccountWidgetGiftCardSection.append(gktAccountWidgetGiftCardSectionBodyListHTML)

                        }else{
                            //empty state data
                            let noGiftcardFoundHTML = gkt.gktAccountWidget.f.prepareEmptyStateForGiftCardSection();
                            gktAccountWidgetGiftCardSectionBodyListHTML.html(noGiftcardFoundHTML)
                        }
                        gktAccountWidgetGiftCardSection.append(gktAccountWidgetGiftCardSectionBodyListHTML)
                    }else{
                        gktAccountWidgetGiftCardSection.html(gkt.utility.displayLoadingSpinner())
                    }
                    
                    return gktAccountWidgetGiftCardSection;

                },
                prepareEmptyStateForGiftCardSection: function () {
                    let giftcardSectionLanguageData = gkt.settings.languageData.accountWidget.giftcardSection;
                    let noGiftcardFoundHTML = gkt.$("<div>").addClass("gktAccountWidgetNoGiftCardDataFound")
                    let noDataFoundMainText = giftcardSectionLanguageData.noGiftcardFoundMainText.value || "No Gift Cards Found1";
                    let noDataFoundSubText = giftcardSectionLanguageData.noGiftcardFoundSubText.value || " ";
                    
                    let noGiftcardFoundMainTextHTML = gkt.$("<div>").addClass("gktAccountWidgetNoGiftCardDataFoundMainText").html(noDataFoundMainText)
                    let noGiftcardFoundSubTextHTML = gkt.$("<div>").addClass("gktAccountWidgetNoGiftCardDataFoundSubText").html(noDataFoundSubText)

                    gkt.gktAccountWidget.f.applyMainTextColorCSS(noGiftcardFoundMainTextHTML);
                    gkt.gktAccountWidget.f.applySubTextColorCSS(noGiftcardFoundSubTextHTML);
                    noGiftcardFoundHTML.append(noGiftcardFoundMainTextHTML).append("<br/>").append(noGiftcardFoundSubTextHTML);
                    return noGiftcardFoundHTML;
                },
                prepareEmptyStateForRewardSection: function () {
                    let rewardSectionLanguageData = gkt.settings.languageData.accountWidget.rewardSection;
                    let noRewardsFound = gkt.$("<div>").addClass("gktAccountWidgetNoRewardDataFound")
                    let noDataFoundMainText = rewardSectionLanguageData.noRewardFoundMainText.value || "No Rewards Found1";
                    let noDataFoundSubText = rewardSectionLanguageData.noRewardFoundSubText.value || " ";

                    let noRewardFoundMainTextHTML = gkt.$("<div>").addClass("gktAccountWidgetNoRewardDataFoundMainText").html(noDataFoundMainText)
                    let noRewardFoundSubTextHTML = gkt.$("<div>").addClass("gktAccountWidgetNoRewardDataFoundSubText").html(noDataFoundSubText)

                    gkt.gktAccountWidget.f.applyMainTextColorCSS(noRewardFoundMainTextHTML);
                    gkt.gktAccountWidget.f.applySubTextColorCSS(noRewardFoundSubTextHTML);
                    noRewardsFound.append(noRewardFoundMainTextHTML).append("<br/>").append(noRewardFoundSubTextHTML);
                    return noRewardsFound;
                },
                insertIntoCartPageWrapper: function (settings, accountWidgetCartPageHTML) {
                    gkt.elements.cartPageWrapperV2.find(".gktAccountWidgetWrapper").html(accountWidgetCartPageHTML) 
                },
                refreshRewardSection_and_RewardDetails: function () {
                    gkt.gktAccountWidget.f.prepareRewardSection()
                    gkt.gktAccountWidget.f.prepareRewardGiftCardDetails();
                    gkt.gktAccountWidget.f.prepareBuyWithRewardsButton();
                },
                applyMainTextColorCSS: function (element) {
                    if(gkt.settings.accountWidget && gkt.settings.accountWidget.customization && gkt.settings.accountWidget.customization.mainTextColor){
                        let mainTextColor  = gkt.settings.accountWidget.customization.mainTextColor;
                        element.css("color", mainTextColor)
                    }
                },
                applySubTextColorCSS: function (element) {
                    if(gkt.settings.accountWidget && gkt.settings.accountWidget.customization && gkt.settings.accountWidget.customization.subTextColor){
                        let subTextColor  = gkt.settings.accountWidget.customization.subTextColor;
                        element.css("color", subTextColor)
                    }
                },
                applyButtonCSS: function (element) {
                    if(gkt.settings.accountWidget && gkt.settings.accountWidget.customization && gkt.settings.accountWidget.customization.buttonColor){
                        let buttonColor  = gkt.settings.accountWidget.customization.buttonColor;
                        element.css("background-color", buttonColor)
                    } 
                   if(gkt.settings.accountWidget && gkt.settings.accountWidget.customization && gkt.settings.accountWidget.customization.buttonTextColor){
                        let buttonTextColor  = gkt.settings.accountWidget.customization.buttonTextColor;
                        element.css("color", buttonTextColor)
                    }
                },
                reRenderModalUI: function () {
                    gkt.gktAccountWidget.f.prepareWidgetModal();
                    if(gkt.gktAccountWidget.state.activeTabFn){
                        gkt.gktAccountWidget.state.activeTabFn();
                    }
                },
                prepareBuyWithRewardsButton: function () {

                    let generalSettingsLanguageData = gkt.settings.languageData.accountWidget.generalSettings;
                    let gktAccountWidgetBuyWithRewardsButton;
                    if(gkt.$(".gktAccountWidgetBuyWithRewardsButton").length > 0){
                        gktAccountWidgetBuyWithRewardsButton = gkt.$(".gktAccountWidgetBuyWithRewardsButton");
                        gktAccountWidgetBuyWithRewardsButton.html("");
                    }else{
                        gktAccountWidgetBuyWithRewardsButton = gkt.$("<div>").addClass("gktAccountWidgetBuyWithRewardsButton")
                    }
                    
                    gktAccountWidgetBuyWithRewardsButton.text(gkt.utility.renderLanguageValue(generalSettingsLanguageData.buyWithRewardsButtonText || "Buy with Rewards"))

                    if(gkt.settings.customer && gkt.settings.customer.rewardgiftcard && gkt.settings.customer.rewardgiftcard.balance > 0 && gkt.settings.customer.rewardgiftcard.decryptCode) {
                        gktAccountWidgetBuyWithRewardsButton.on("click", gkt.gktAccountWidget.action.buyWithRewardsClicked);
                        gktAccountWidgetBuyWithRewardsButton.removeClass("gktDisabled");
                    }else{
                        gktAccountWidgetBuyWithRewardsButton.addClass("gktDisabled");
                    }

                    gkt.gktAccountWidget.f.applyButtonCSS(gktAccountWidgetBuyWithRewardsButton);
                    return gktAccountWidgetBuyWithRewardsButton;
                },
                
            },
            action: {
                openAccountWidgetModal: function () {
                    gkt.gktAccountWidget.state.isLoading = true;
                    gkt.gktAccountWidget.f.fetchLoggedInUserAndUpdateUI();
                    // gkt.elements.cartPageWrapperV2.find(".gktAccountWidgetModalWrapper").css("display", "grid");
                    gkt.$(".gktAccountWidgetModalWrapper").css("display", "grid");
                    gkt.gktAccountWidget.action.showRewardSection();
                },
                closeAccountWidgetModal: function () {
                    // gkt.elements.cartPageWrapperV2.find(".gktAccountWidgetModalWrapper").css("display", "none")
                    gkt.$(".gktAccountWidgetModalWrapper").css("display", "none")
                },
                copyRewardCode: function () {
                    let rewardCode = gkt.$(this).parent().find(".gktRewardCode").html()
                    //use native javascript to copy to clipboard
                    let rewardCodeInput = gkt.$("<input>").val(rewardCode)
                    gkt.$("body").append(rewardCodeInput)
                    rewardCodeInput.select()
                    document.execCommand("copy")
                    rewardCodeInput.remove()
                    gkt.$(this).html("Copied")
                },
                showRewardSection: function () {
                    console.log("showRewardsTab");
                    gkt.$(".gktAccountWidgetRewardSection").css("display", "grid")
                    //hide other sections
                    gkt.$(".gktAccountWidgetGiftCardSection").css("display", "none")
                    gkt.$(".gktAccountWidgetBodyTabRewards").siblings().removeClass("gktAccountWidgetBodyTabActive")
                    gkt.$(".gktAccountWidgetBodyTabRewards").addClass("gktAccountWidgetBodyTabActive")
                    gkt.gktAccountWidget.state.activeTabFn = gkt.gktAccountWidget.action.showRewardSection;
                },
                showGiftCardSection: function () {
                    console.log("showGiftCardsTab")
                    gkt.$(".gktAccountWidgetGiftCardSection").css("display", "grid");
                    //hide other sections
                    gkt.$(".gktAccountWidgetRewardSection").css("display", "none")
                    // remove gktAccountWidgetBodyTabActive from other siblings
                    gkt.$(".gktAccountWidgetBodyTabGiftCards").siblings().removeClass("gktAccountWidgetBodyTabActive")
                    gkt.$(".gktAccountWidgetBodyTabGiftCards").addClass("gktAccountWidgetBodyTabActive")
                    gkt.gktAccountWidget.state.activeTabFn = gkt.gktAccountWidget.action.showGiftCardSection;

                },
                addGiftCardToRewardCode: async function () {
                   //read the giftcardID from the button data attribute
                    //read the attribute data-giftcard-id from the button or its parent
                    let giftCardId = gkt.$(this).attr("data-giftcard-id") || gkt.$(this).parent().attr("data-giftcard-id");
                    //get the reward code
                    console.log("giftCardId", giftCardId);

                    //when this button is clicked, we need to change this buttons text to loading... using renderLanguageValue
                    // and also disable this button for clicks
                    // by attaching gktDisabled class
                    gkt.$(this).children().text(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.giftcardSection.addingCodeToRewardsText) || "adding...1")
                    gkt.$(this).addClass("gktDisabled")

                    //attachh the class to all other buttons in the list
                    gkt.$(this).parent().siblings().addClass("gktDisabled")

                    const addToReward =  await gkt.f.addGiftCardToRewardCodeAPI(giftCardId)


                    if(addToReward){
                        gkt.$(this).children().text(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.giftcardSection.addedCodeToRewardText) || "Added1");
                        gkt.$(this).off("click")
                        //add opacity to the button of 0.6
                        gkt.$(this).css("opacity", "0.5")
                        gkt.$(this).children().css("border-radius", "2px")
                        gkt.gktAccountWidget.f.refreshRewardSection_and_RewardDetails()
                    }else{
                        gkt.$(this).children().text(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.generalSettings.errorMessage) || "Error occured! Try again");
                        await new Promise(resolve => setTimeout(resolve, 1500));

                        gkt.$(this).on("click", gkt.gktAccountWidget.action.addGiftCardToRewardCode)
                         // setTimeout(function(){
                        gkt.$(this).children().text(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.giftcardSection.addToAccountButtonText) || "Add To Account1");
                        // }, 100)
                    } 
                    
                    gkt.$(this).removeClass("gktDisabled")
                    gkt.$(this).parent().siblings().removeClass("gktDisabled")



                },
                buyWithRewardsClicked: async function () {
                            try{
                                gkt.$(this).addClass("gktDisabled")
                                gkt.$(this).html(gkt.utility.renderLanguageValue(gkt.settings.languageData.accountWidget.generalSettings.buyWithRewardsButtonLoadingText) || "Loading Checkout...1")
                                window.location.href = window.location.origin + "/cart/checkout?discount=" + gkt.settings.customer.rewardgiftcard.decryptCode
                            }catch(e){
                                console.log("error", e)
                                gkt.$(this).removeClass("gktDisabled")
                            }
                },

            },
        },
        gktMessage:{
            init: function (settings, parent) {
                gkt.gktMessage.initialize(settings, parent)
            },
            initialize: function (settings, parent) {
                let productHandle = gkt.f.getProductPageHandle(settings)
                let {isEnabledOnProductPage, isEnabledOnCartPage} = gkt.gktMessage.f.checkifGiftMessageEnabled(settings.giftMessage, productHandle, parent)

                if (parent == "PRODUCT_PAGE" && isEnabledOnProductPage){
                    // let oneClickUpsellProductPageHTML = gkt.gktOneClickUpsell.f.prepareUI(settings, variantListToBeShownOnProductPage, parent)
                    let giftMessageProductPageHTML = gkt.gktMessage.f.prepareUI(settings, productHandle, parent)
                    gkt.gktMessage.f.insertIntoProductPageWrapper(settings, giftMessageProductPageHTML)
                    gkt.utility.overWriteBuyNowBtn()
                    gkt.state.isOverWriteBuyNowBtnTriggered = true
                }

                if (parent == "CART_PAGE" && isEnabledOnCartPage && productHandle == "undefined"){
                    let giftMessageCartPageHTML = gkt.gktMessage.f.prepareUI(settings, productHandle, parent)
                    gkt.gktMessage.f.insertIntoCartPageWrapper(settings, giftMessageCartPageHTML)
                }

                
            },
            f: {
                checkifGiftMessageEnabled: function (giftMessage, currProductHandle, parent) {
                    let isEnabledOnProductPage = false
                    let isEnabledOnCartPage = false

                    if(!giftMessage.isGiftMessageEnabled){
                        return {isEnabledOnProductPage, isEnabledOnCartPage}
                    }

                    if (giftMessage.isVisibleOnCart) {
                        isEnabledOnCartPage = true
                    }

                    if (giftMessage.isVisibleOnAllProductPages) {
                        isEnabledOnProductPage = true
                    } else if (giftMessage.isVisibleOnSpecificProductPages &&
                            giftMessage.visibleOnSpecificProductPages &&
                            giftMessage.visibleOnSpecificProductPages.find(x => x.handle === currProductHandle)) {

                        isEnabledOnProductPage = true
                    }

                    return {isEnabledOnProductPage, isEnabledOnCartPage}
                },
                prepareUI:  function(settings, currProductHandle, parent){
                    let gktGiftMessageContainer = gkt.$("<div>").addClass('gktGiftMessageContainer')

                    let gktGiftMessageItemContainer = gkt.$("<div>").addClass('gktGiftMessageItemContainer')
                    let gktGiftMessageTextArea = gkt.$("<textarea>").addClass('gktGiftMessageTextArea')
                                                                    .attr("placeholder", settings.languageData.giftMessage.giftMessagePlaceholderText)
                                                                    

                    let gktGiftMessageItemContainerCheckboxLable = gkt.$("<label>").addClass('gktCustomCheckboxMsgContainer')
                    let inputCheckboxEle = gkt.$("<input>").addClass('gktGiftMessageInputCheckboxEle')
                        .attr("type", "checkbox")

                    if (gkt.utility.getNoteFromCart()) {
                        inputCheckboxEle.attr("checked", true)
                        let noteVal = gkt.utility.getNoteFromCart()
                        gktGiftMessageTextArea.val(noteVal)
                        // gktGiftMessageTextArea.css("display", "block")
                    }


                    gktGiftMessageItemContainerCheckboxLable.append(inputCheckboxEle)
                    gktGiftMessageItemContainerCheckboxLable.append(gkt.$("<span>").addClass("gktCustomMsgCheckboxCheckmark"))


                    //create a div with appendString 
                    let gktGiftMessageItemContainerLableText = gkt.$("<div>").addClass('gktGiftMessageItemContainerLabelText')
                                                                .html(settings.languageData.giftMessage.giftMessageHeadingLabel)
                    gktGiftMessageItemContainerCheckboxLable.append(gktGiftMessageItemContainerLableText)
                    gktGiftMessageItemContainer.append(gktGiftMessageItemContainerCheckboxLable)
                    gktGiftMessageContainer.append(gktGiftMessageItemContainer)


                    gktGiftMessageContainer.append(gktGiftMessageTextArea)

                    gkt.$(document).on("click", ".gktGiftMessageInputCheckboxEle",async (e)=>{
                        // window.eventCick = e
                        // let isChecked = gkt.$(e.currentTarget).find(".gktGiftMessageInputCheckboxEle").is(":checked")
                        // if(gkt.$(this).prop('checked') == true){
                        //     console.log("gktCustomCheckboxMsgContainer")
                        // }
                        if(!e.currentTarget.checked){
                            let updateCartData = {  }
                            updateCartData.note = null
                            updateCartData.attributes = {"gktGiftMessage": ""}
                            await gkt.utility.updateCart(updateCartData)
                            // if(gkt.$(".gktGiftMessageTextArea")){
                            //     gkt.$(".gktGiftMessageTextArea").val("")
                            // } 
                            
                        }else{
                            // if(gkt.$(".gktGiftMessageTextArea")){
                            //     let updateCartData = {  }
                            //     updateCartData.note = gkt.$(".gktGiftMessageTextArea").val()
                            //     await gkt.utility.updateCart(updateCartData)
                            // } 
                        }
                        gkt.$(document).find('.gktGiftMessageTextArea').css("display", "block")
                    })

                    gkt.$(document).on("keyup ", ".gktGiftMessageTextArea", ((event)=>{gkt.gktMessage.action.onGiftMessageTextAreakeyup(event,settings, parent)}))
                    
                    return gktGiftMessageContainer
                },
                insertIntoProductPageWrapper: function (settings, giftMessageHTML) {

                    gkt.elements.productPageWrapperV2.find(".gktGiftMessageWrapper").css("display", "block")

                    
                    gkt.elements.productPageWrapperV2.find(".gktGiftMessageWrapper").append(giftMessageHTML);

                },
                insertIntoCartPageWrapper: function (settings, giftMessageHTML) {

                    gkt.elements.cartPageWrapperV2.find(".gktCartGiftMessageWrapper").css("display", "block")

                    gkt.elements.cartPageWrapperV2.find(".gktCartGiftMessageWrapper").append(giftMessageHTML);

                },
            },
            action: {
                onGiftMessageTextAreakeyup: function (event,settings, parent){
                        let giftMessageValue = event.target.value
                        let updateCartData = {  }
                        updateCartData.note = giftMessageValue
                        updateCartData.attributes = {"gktGiftMessage": giftMessageValue}
                        if(gkt.state.timer){
                          clearTimeout(gkt.state.timer);
                          gkt.state.timer  = undefined
                        }
                        
                        gkt.state.timer = setTimeout(()=>{
                                           gkt.utility.updateCart(updateCartData).then((data) => {
                         									console.log("gift message updated")
                        								})
                                           },1000)

                        // gkt.utility.updateCart(updateCartData).then((data) => {
                        // //    console.log("gift message updated")
                        // })
                }
            }
            
        },
        gktVideoMsg: {
            init: function (settings, parent) {
                gkt.gktVideoMsg.initialize(settings, parent)
             
            },
            state: {
                elements: {},
                uploadedVideoId: null,
                recordingTimeMS: 60000,
                recordingTime: "1:00",
                recordedBlob: "",
                mediaRecorder: null,
                interval: undefined
            },
            initialize: function (settings, parent) {
                let productHandle = gkt.f.getProductPageHandle(settings)
                console.log("videoMesageInitialize");
                if(gkt.settings.videoMessage.isVideoMessagingEnabled){
                    gkt.gktVideoMsg.f.registerEvents()
                    gkt.gktVideoMsg.f.prepareVideoMsgPlayer()
                    // // let oneClickUpsellProductPageHTML = gkt.gktOneClickUpsell.f.prepareUI(settings, variantListToBeShownOnProductPage, parent)
                    // let giftMessageProductPageHTML = gkt.gktMessage.f.prepareUI(settings, productHandle, parent)
                    // gkt.gktMessage.f.insertIntoProductPageWrapper(settings, giftMessageProductPageHTML)
                    // gkt.utility.overWriteBuyNowBtn()
                    // gkt.state.isOverWriteBuyNowBtnTriggered = true
                }

            },
            f:{
                registerEvents: function () {
                    gkt.$(document).on("click", ".gktVideoMsgButton", gkt.gktVideoMsg.actions.gktVideoMsgButton)
                },
                prepareVideoMsgPlayer: function () {

                    let gktVideoMsgPlayerWrapper = gkt.$("<div>").addClass("gktVideoMsgPlayerWrapper");

                    let gktRecorder  =  gkt.$("<div>").addClass("gktRecorder")
                    console.log("prepareVideoMsgPlayer");
                    let gktRecorderCloseBtn  =  gkt.$("<button>").addClass("gktRecorderCloseBtn").on("click", function (e) { gkt.gktVideoMsg.f.clickClose(e) })
                    let gktRecorderCloseBtnImg =  gkt.$("<img>").attr("src", "https://db07ji0eqime4.cloudfront.net/public/videoMessage/close-video.svg")
                    gktRecorderCloseBtn.append(gktRecorderCloseBtnImg)


                    let gktRecord  =  gkt.$("<div>").addClass("gktRecord")
                    let gktVideoPlayer = gkt.$("<video>").addClass("gktVideoPlayer")
                                                        .attr("autoplay", true)
                                                        .prop("muted", true)
                                                        .attr("poster", "https://db07ji0eqime4.cloudfront.net/public/videoMessage/free-video.jpg")
                    let gktPermissionDenied = gkt.$("<div>").addClass("gktPermissionDenied gktVideoPlayerHide").text( gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.permissionDenied))
                    let gktVideoPlayerStatus = gkt.$("<div>").addClass("gktVideoPlayerStatus").html( gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.pressToRecord))



                    //let gktVideoPlayerEmptyPTag = gkt.$("<p>");

                    let gktVideoPlayerStartBtn = gkt.$("<button>").addClass("gktVideoPlayerStartBtn").on("click", function (e) { gkt.gktVideoMsg.f.clickStart(e) })
                    let gktVideoPlayerRedDot = gkt.$("<div><p></p></div>").addClass("gktVideoPlayerRedDot")
                    //gktVideoPlayerRedDot.append(gktVideoPlayerEmptyPTag);
                    gktVideoPlayerStartBtn.append(gktVideoPlayerRedDot)
                        
                    let gktVideoPlayerStopBtn = gkt.$("<button>").addClass("gktVideoPlayerStopBtn").on("click", function (e) { gkt.gktVideoMsg.f.clickStop(e) })
                    let gktVideoPlayerRedSquare = gkt.$("<div><p></p></div>").addClass("gktVideoPlayerRedSquare")
                    //gktVideoPlayerRedSquare.append(gktVideoPlayerEmptyPTag);
                    gktVideoPlayerStopBtn.append(gktVideoPlayerRedSquare)  
                     
                    
                    let gktVideoPlayerTimeLeft = gkt.$("<div>").addClass("gktVideoPlayerTimeLeft gktVideoPlayerHide") 
                    
                    gktRecord.append(gktVideoPlayer)
                    gktRecord.append(gktPermissionDenied)
                    gktRecord.append(gktVideoPlayerStatus)
                    gktRecord.append(gktVideoPlayerStartBtn)
                    gktRecord.append(gktVideoPlayerStopBtn)
                    gktRecord.append(gktVideoPlayerTimeLeft)
                    
                    
                    let gktRecorded  =  gkt.$("<div>").addClass("gktRecorded")

                    let gktVideoPlayerRecording = gkt.$("<video>").addClass("gktVideoPlayerRecording")
                                                        .attr("preload", "none")
                                                        .attr("poster", "https://db07ji0eqime4.cloudfront.net/public/videoMessage/free-video.jpg")
                    
                    let gktLoadingHeading = gkt.$("<div>").addClass("gktLoadingHeading gktVideoPlayerHide").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.loading))
                    let gktUploadingVideoHeading = gkt.$("<div>").addClass("gktUploadingVideoHeading gktVideoPlayerHide").html( gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.uploading))
                    
                    let gktVideoPlayerControls = gkt.$("<div>").addClass("gktVideoPlayerControls")
              
                    let gktVideoPlayerControlsAcceptBtnDiv = gkt.$("<div>").addClass("gktVideoPlayerControlsAcceptBtnDiv");

                    let gktVideoPlayerControlsAcceptBtnDivInfo = gkt.$("<p>").addClass("gktVideoPlayerControlsBtnDivInfo").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.startUploadText));

                    gktVideoPlayerControlsAcceptBtnDiv.append(gktVideoPlayerControlsAcceptBtnDivInfo);
                    
                    let gktVideoPlayerControlsAcceptBtn  =  gkt.$("<button>").addClass("gktVideoPlayerControlsAcceptBtn").on("click", function (e) { gkt.gktVideoMsg.f.clickAccept(e) })
                    let gktVideoPlayerControlsAcceptBtnImg =  gkt.$("<img>").addClass("gktVideoPlayerControlsAcceptBtnImg")
                                                                            .attr("src", "https://db07ji0eqime4.cloudfront.net/public/videoMessage/confirm-video.png")
                    gktVideoPlayerControlsAcceptBtn.append(gktVideoPlayerControlsAcceptBtnImg)
                    gktVideoPlayerControlsAcceptBtnDiv.append(gktVideoPlayerControlsAcceptBtn);

                   

                    let gktVideoPlayerControlsPlayBtnDiv = gkt.$("<div>").addClass("gktVideoPlayerControlsPlayBtnDiv");
                    
                    let gktVideoPlayerControlsPlayBtnDivInfo = gkt.$("<p>").addClass("gktVideoPlayerControlsBtnDivInfo").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.playText));

                    gktVideoPlayerControlsPlayBtnDiv.append(gktVideoPlayerControlsPlayBtnDivInfo);

                    let gktVideoPlayerControlsPlayBtn  =  gkt.$("<button>").addClass("gktVideoPlayerControlsPlayBtn").on("click", function (e) { gkt.gktVideoMsg.f.clickPlay(e) })
                    let gktVideoPlayerControlsPlayBtnImg =  gkt.$("<img>").addClass("gktVideoPlayerControlsPlayBtnImg")
                                                                            .attr("src", "https://db07ji0eqime4.cloudfront.net/public/videoMessage/play-video.png")
                    gktVideoPlayerControlsPlayBtn.append(gktVideoPlayerControlsPlayBtnImg)
                    gktVideoPlayerControlsPlayBtnDiv.append(gktVideoPlayerControlsPlayBtn);


                    let gktVideoPlayerControlsReStartBtnDiv = gkt.$("<div>").addClass("gktVideoPlayerControlsReStartBtnDiv");

                    let gktVideoPlayerControlsReStartBtnDivInfo = gkt.$("<p>").addClass("gktVideoPlayerControlsBtnDivInfo").html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.reRecordVideoText));

                    gktVideoPlayerControlsReStartBtnDiv.append(gktVideoPlayerControlsReStartBtnDivInfo);

                    let gktVideoPlayerControlsReStartBtn  =  gkt.$("<button>").addClass("gktVideoPlayerControlsReStartBtn").on("click", function (e) { gkt.gktVideoMsg.f.clickReStart(e) })
                    let gktVideoPlayerControlsReStartBtnImg =  gkt.$("<img>").addClass("gktVideoPlayerControlsReStartBtnImg")
                                                                            .attr("src", "https://db07ji0eqime4.cloudfront.net/public/videoMessage/redo-video.png")
                    gktVideoPlayerControlsReStartBtn.append(gktVideoPlayerControlsReStartBtnImg)
                    gktVideoPlayerControlsReStartBtnDiv.append(gktVideoPlayerControlsReStartBtn);

                    gktVideoPlayerControls.append(gktVideoPlayerControlsReStartBtnDiv)
                    gktVideoPlayerControls.append(gktVideoPlayerControlsPlayBtnDiv)
                    gktVideoPlayerControls.append(gktVideoPlayerControlsAcceptBtnDiv)


                    gktRecorded.append(gktVideoPlayerRecording)
                    gktRecorded.append(gktLoadingHeading)
                    gktRecorded.append(gktUploadingVideoHeading)
                    gktRecorded.append(gktVideoPlayerControls)
                    
                    
                    gktRecorder.append(gktRecorderCloseBtn)
                    gktRecorder.append(gktRecord)
                    gktRecorder.append(gktRecorded)

                    if(gkt.$(".gktVideoMsgPlayerWrapper").length > 0){
                        gkt.$(".gktVideoMsgPlayerWrapper").remove();
                    }
                    if(gkt.$(".gktRecorder").length > 0){
                        gkt.$(".gktRecorder").remove();
                    }


                    gkt.$(".gktGiftCardMessageContent").append(gktVideoMsgPlayerWrapper);
                    gkt.$(".gktVideoMsgPlayerWrapper").append(gktRecorder)
                    gkt.gktVideoMsg.state.elements.gktRecorder = gktRecorder
                    gkt.gktVideoMsg.state.elements.gktRecord = gktRecord
                    gkt.gktVideoMsg.state.elements.gktRecorded = gktRecorded
                    gkt.gktVideoMsg.state.elements.gktVideoPlayer = gktVideoPlayer
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStartBtn = gktVideoPlayerStartBtn
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStopBtn = gktVideoPlayerStopBtn
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerControlsReStartBtn = gktVideoPlayerControlsReStartBtn
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerControlsPlayBtn = gktVideoPlayerControlsPlayBtn
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording = gktVideoPlayerRecording
                    gkt.gktVideoMsg.state.elements.gktRecorderCloseBtn = gktRecorderCloseBtn
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerControlsAcceptBtn = gktVideoPlayerControlsAcceptBtn
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerControls = gktVideoPlayerControls
                    gkt.gktVideoMsg.state.elements.gktLoadingHeading = gktLoadingHeading
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerTimeLeft = gktVideoPlayerTimeLeft
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStatus = gktVideoPlayerStatus
                    gkt.gktVideoMsg.state.elements.gktPermissionDenied = gktPermissionDenied
                    gkt.gktVideoMsg.state.elements.gktUploadingVideoHeading = gktUploadingVideoHeading


                },
                createRecorder: function() {
                    gkt.gktVideoMsg.state.elements.gktRecorder.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktRecord.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStartBtn.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStatus.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktPermissionDenied.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktRecorded.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStopBtn.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerControls.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerTimeLeft.html(gkt.gktVideoMsg.state.recordingTime);
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStatus.html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.pressToRecord));
                    gkt.gktVideoMsg.state.recordingTime = "1:00";
                    gkt.gktVideoMsg.state.elements.gktUploadingVideoHeading.html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.uploading));
                    navigator.mediaDevices
                        .getUserMedia({
                        audio: true,
                        video: true,
                        })
                        .then((stream) => {
                            gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].srcObject = stream;
                        })
                        .catch((error) => {
                            console.log("navigator", error)
                            console.log(error);
                            gkt.gktVideoMsg.state.elements.gktVideoPlayerStartBtn.addClass("gktVideoPlayerHide");
                            gkt.gktVideoMsg.state.elements.gktVideoPlayerStatus.addClass("gktVideoPlayerHide");
                            gkt.gktVideoMsg.state.elements.gktPermissionDenied.removeClass("gktVideoPlayerHide");
                        });
                },
                clickClose: function(e){
                    e.preventDefault();
                    gkt.$('.gktVideoMsgPlayerWrapper').css('display', 'none')
                    // gkt.gktVideoMsg.state.elements.gktRecorder.addClass("gktVideoPlayerHide");
                    if(gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].srcObject){
                        gkt.gktVideoMsg.f.stopRecording(gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].srcObject);
                    }
                    
                    gkt.gktVideoMsg.f.revokeObjectUrl();
                },
                stopRecording: function (stream) {
                    if(gkt.gktVideoMsg.state.interval) {
                        clearInterval(gkt.gktVideoMsg.state.interval);
                    }
                    if(gkt.gktVideoMsg.state.mediaRecorder && gkt.gktVideoMsg.state.mediaRecorder.state !== "inactive") {
                        gkt.gktVideoMsg.state.mediaRecorder.stop();
                    }
                    stream.getTracks().forEach(function (track) {
                        if (track.readyState == "live") {
                        console.log("hello - stop");
                        track.stop();
                        }
                    })
                },
                clearTracks: function (stream) {
                    stream.getTracks().forEach(function (track) {
                        if (track.readyState == "live") {
                        console.log("hello - stop");
                        track.stop();
                        }
                    })
                },
                revokeObjectUrl: function () {
                    URL.revokeObjectURL(gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording.src);
                },
                clickStart: function async (e){
                    e.preventDefault();
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStartBtn.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktRecorderCloseBtn.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStopBtn.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerTimeLeft.removeClass("gktVideoPlayerHide");
                    // the below field for the text 
                    //hide the toggle
                    //gktVideoMsgCheckboxWrapper

                    gkt.gktVideoMsg.f.clearTracks(gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].srcObject);

                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStatus.html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.recording));
                    navigator.mediaDevices
                        .getUserMedia({
                        video: true,
                        audio: true,
                        })
                        .then((stream) => {
                            console.log("1 - navigator");
                            gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].srcObject = stream;
                            // gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].captureStream = gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].captureStream || gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].mozCaptureStream ;
                            // use HTMLCanvasElement.captureStream() 
                            // gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].captureStream = gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].captureStream || gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].mozCaptureStream ;
                            return new Promise((resolve) => (
                                gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].onplaying = resolve
                            ));
                        })
                        .then(() => {
                            console.log("2 - onplaying");
                            return gkt.gktVideoMsg.f.startRecording(e, gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].srcObject)
                        })
                        .then((recordedChunks) => {
                            console.log("3 - startRecording");
                            console.log(recordedChunks);

                            gkt.gktVideoMsg.state.elements.gktVideoPlayerControls.removeClass("gktVideoPlayerHide");
                            gkt.gktVideoMsg.state.elements.gktUploadingVideoHeading.addClass("gktVideoPlayerHide");
                            gkt.gktVideoMsg.state.elements.gktLoadingHeading.addClass("gktVideoPlayerHide");
                            gkt.gktVideoMsg.state.recordedBlob = new Blob(recordedChunks, { type: "video/mp4" });
                            gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording.attr("src",URL.createObjectURL(gkt.gktVideoMsg.state.recordedBlob));
                            gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording[0].load();
                        })
                        .catch(
                            (error) => 
                            console.log(error)
                        );
                },
                startRecording: function (e, stream) {
                    return new Promise ((resolve, reject) => {

                        let mediaRecorder = new MediaRecorder(stream);
                        gkt.gktVideoMsg.state.mediaRecorder = mediaRecorder;
                        let parts = [];
                        mediaRecorder.ondataavailable = (event) => {
                            parts.push(event.data);
                        };
                        mediaRecorder.start(1000);

                        mediaRecorder.onerror = (event) => reject(event.name); 

                        gkt.gktVideoMsg.f.wait(mediaRecorder);

                        mediaRecorder.onstop = function(){ 
                            console.log("mediaRecorder.onstop() func called");
                            resolve(parts);
                        }
                    })
                },
                clickStop: function (e) {
                    e.preventDefault();
                    gkt.gktVideoMsg.state.elements.gktRecord.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktRecorded.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerControls.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerTimeLeft.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerStatus.addClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktRecorderCloseBtn.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.state.elements.gktLoadingHeading.removeClass("gktVideoPlayerHide");
                    gkt.gktVideoMsg.f.stopRecording(gkt.gktVideoMsg.state.elements.gktVideoPlayer[0].srcObject);
                },
                covertBlobToBase64: async function (recordedBlob){

                    const reader = new FileReader();
                    reader.readAsDataURL(recordedBlob);

                    reader.onloadend = function () {
                    
                    var arrayBuffer = reader.result;

                    console.log(arrayBuffer);

                    var formData = new FormData();
                    // gkt.settings.SERVER_URL = "https://dev.api.giftkart.app"
                    formData.append("upload_data", recordedBlob, "video.txt");
                    formData.append("shopName", gkt.settings.merchantInfo.shopName);

                    console.time('Video upload Time');
                        fetch(gkt.settings.SERVER_URL+"/api/proxy/upload/video?shopName="+gkt.settings.merchantInfo.shopName,{
                            method: 'POST',
                            body: formData
                        }).then(
                            response => response.json() // if the response is a JSON object
                        ).then(
                            success => {
                                if(success.responseCode == 200){
                                    gkt.gktVideoMsg.state.uploadedVideoId = success.data.videoMsgId;
                                    console.log(success) // Handle the success response object
                                    console.timeEnd('Video upload Time');
                                    gkt.gktVideoMsg.state.elements.gktUploadingVideoHeading.html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.uploadConfirmation));
                                    gkt.$('.gktVideoMsgPlayerWrapper').css('display', 'grid')
                                    // Show feedback that it got uploaded
                                    // gkt.gktVideoMsg.state.elements.gktRecorder.addClass("gktVideoPlayerHide");
                                }
                                /*
                                * @Abhishek, the below if else condition is added to handle the
                                * condition where the api fails in sending over responseCode 200.
                                */ 
                                else{
                                    console.log(success) // Handle the error response object
                                    gkt.gktVideoMsg.state.elements.gktUploadingVideoHeading.html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.errorMessage));
                                }

                            }
                        ).catch(
                            error => {
                            console.log(error) // Handle the error response object
                            gkt.gktVideoMsg.state.elements.gktUploadingVideoHeading.html(gkt.utility.renderLanguageValue(gkt.settings.languageData.videoMessage.errorMessage));
                            }
                        );
                    }
                },
                clickAccept: function(e) {
                    e.preventDefault();
                    gkt.gktVideoMsg.state.elements.gktVideoPlayerControls.addClass("gktVideoPlayerHide")
                    gkt.gktVideoMsg.state.elements.gktUploadingVideoHeading.removeClass("gktVideoPlayerHide")
                    gkt.gktVideoMsg.f.covertBlobToBase64(gkt.gktVideoMsg.state.recordedBlob);
                },
                wait: function(mediaRecorder){
                    var now = new Date().getTime();
                    var deadline = new Date(now + gkt.gktVideoMsg.state.recordingTimeMS).getTime();
                    var interval = setInterval(() => {
                        now = new Date().getTime();
                        var t = deadline - now;
                        console.log(t);
                        var minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));
                        var seconds = Math.floor((t % (1000 * 60)) / 1000);
                        if (t < 0) {
                            gkt.$('.gktVideoPlayerStopBtn').click();
                        }
                        gkt.gktVideoMsg.state.elements.gktVideoPlayerTimeLeft.html(minutes + " : " + seconds)
                    }, 1000);
                    gkt.gktVideoMsg.state.interval = interval;
                },
                clickReStart: function (e) {
                    e.preventDefault();
                    if(gkt.utility.isMobileView()){
                        // gktVideoMessageFileInput.click();
                        // find this class in the document and trigger a click
                        gkt.gktVideoMsg.f.revokeObjectUrl()
                        gkt.$('.gktVideoMessageFileInput').click();
                    }else{
                        gkt.gktVideoMsg.f.revokeObjectUrl()
                        gkt.gktVideoMsg.f.createRecorder();
                    }
                },
                clickPlay: async function(e) {
                    e.preventDefault();
                    try {
                        gkt.gktVideoMsg.state.elements.gktVideoPlayerControls.addClass("gktVideoPlayerHide");
                        gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording[0].play();
                        let isEnded = new Promise((resolve, reject) => {
                            gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording[0].onended = resolve;
                        });
                        await isEnded;
                        gkt.gktVideoMsg.state.elements.gktVideoPlayerRecording[0].load();
                        gkt.gktVideoMsg.state.elements.gktVideoPlayerControls.removeClass("gktVideoPlayerHide");
                        
                    } catch (error) {
                        console.log(error)
                    }                   
                },
                scrollToVideoDiv: function() {
                    // gkt.$(".gktGiftCardMessageContent").animate({scrollTop: 9999},1000);
                    gkt.$(".gktGiftCardMessageContent").animate({scrollTop: 200},2000, 'swing');
                },
            },
            actions: {
                gktVideoMsgButton: function(e){
                    e.preventDefault()
                    gkt.$('.gktVideoMsgPlayerWrapper').css('display', 'grid')
                    gkt.gktVideoMsg.f.createRecorder()
                    gkt.gktVideoMsg.f.scrollToVideoDiv()
                },
            },
            events: {

            },
            
        },
        gktFreeGiftCardPopup:{
            init:function(settings,parent){
                // gkt.gktFreeGiftCardPopup.initialize(settings,parent)
            },
            state:{
                gktFreeGiftcardName:null,
                gktFreeGiftcardEmail:null,
                gktFreeGiftcardMessage:null,
            },
            initialize: async function(settings,parent){
                // let productHandle = gkt.f.getProductPageHandle(settings)
                // gkt.gktFreeGiftCardPopup.f.showGiftCard(settings,parent)
            },
            f:{
                addFreeGiftcardProduct: async function(){
                    gkt.state.freeGiftcardVariantId = undefined
                    let currencySymbol = gkt.settings.merchantInfo?.currencyInfo?.symbol ? gkt.settings.merchantInfo.currencyInfo.symbol : ""
                    if(gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct[0]  && 
                        gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct[0].variants &&
                        gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct[0].variants.length > 0 && 
                        gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct[0].variants[0].variantId){
                        gkt.state.freeGiftcardVariantId = gkt.settings.rewardCampaigns.campaignData.freeGiftcardProduct[0].variants[0].variantId
                    }

                    if(gkt.state.freeGiftcardVariantId){
                        gkt.state.cartData = await gkt.utility.getCart()
                        let item  = gkt.utility.checkIfItemPresentInCart(gkt.state.freeGiftcardVariantId)
                        let cartValue = 0
                        if(gkt.state.cartData && gkt.state.cartData.total_price && ((gkt.state.cartData.total_price)/100)){
                            cartValue = (gkt.state.cartData.total_price)/100
                        }
                        let freeGiftcardValue =  gkt.gktFreeGiftCardPopup.f.getFreeGiftcardValue(cartValue, gkt.settings.rewardCampaigns.campaignData)
                        let isProductConditionMet = gkt.gktFreeGiftCardPopup.f.isFreeGiftcardProductConditionMet(gkt.state.cartData, gkt.settings.rewardCampaigns.campaignData);
                        // let isCustomerTagsConditionMet = gkt.gktFreeGiftCardPopup.f.isCustomerTagsConditionMet(gkt.settings.customer, gkt.settings.rewardCampaigns.campaignData);
                        
                        // if product conditions not met set free giftcard value to 0
                        if(!isProductConditionMet){
                            freeGiftcardValue = false
                        }

                        // remove giftcard from cart if freeGiftcardValue is zero
                        if(freeGiftcardValue == false && item){
                            await gkt.utility.updateCart({ updates: { [item.id]: 0 }})
                            return 
                        }

                        if(cartValue && freeGiftcardValue){
                            
                            let itemObj = {"items": [
                                                                {
                                                                    "id": gkt.state.freeGiftcardVariantId,
                                                                    "quantity": 1,
                                                                    "properties": {
                                                                        "Reward Value": freeGiftcardValue

                                                                    }
                                                                }
                                                            ]}
                            if(gkt.settings.rewardCampaigns.campaignData.giftcardMessageNote && gkt.settings.rewardCampaigns.campaignData.giftcardMessageNote != ""){
                                itemObj.items[0].properties["Message"] = gkt.settings.rewardCampaigns.campaignData.giftcardMessageNote
                            }
                            if(!item){
                                let resAddToCart = await gkt.utility.addToCartV2(itemObj)
                                
                            }else{
                                let rewardValue = freeGiftcardValue
                                if(item && item.properties && item.properties["Reward Value"] && item.properties["Reward Value"] != rewardValue){
                                    await gkt.utility.updateCart({ updates: { [item.id]: 0 }})
                                    let resAddToCart = await gkt.utility.addToCartV2(itemObj)

                                }
                            }
                        }
                    }

                },
                calculateFreeGiftCardValue: function(freeGiftcardValue, cartTotalPrice, freeGiftcardPopupData) {
                    try {
                        if(!freeGiftcardPopupData?.rewardMode ||  freeGiftcardPopupData.rewardMode == "FIXED") {
                            let currencySymbol = gkt.settings.merchantInfo?.currencyInfo?.symbol ? gkt.settings.merchantInfo.currencyInfo.symbol : ""
                            return currencySymbol + "" + freeGiftcardValue;
                        } else {
                            // let calculatedFreeGiftCardValue = (cartTotalPrice/100) * parseFloat(freeGiftcardValue);  // % of cartTotalWithoutDiscount;
                            // calculatedFreeGiftCardValue = parseFloat(parseFloat(calculatedFreeGiftCardValue).toFixed(2))
                            return freeGiftcardValue + "" + "%";
                        }
                    } catch(err) {
                        console.log(err);
                    }
                },
                getFreeGiftcardValue: function (cartTotalPrice, freeGiftcardPopupData){
                    try {
                        let resValue = false 
                        let activeCurrencyRate = gkt.utility.getActiveCurrencyRate(); 
                        if(freeGiftcardPopupData?.rules?.length && freeGiftcardPopupData?.rules?.length > 0){
                        for(let i = 0; i < freeGiftcardPopupData.rules.length; i++){
                            let rule = freeGiftcardPopupData.rules[i]
                            let cartValue = parseFloat(rule.cartValue * activeCurrencyRate).toFixed(2)
                            let freeGiftcardValue = rule.freeGiftcardValue
                            if(parseFloat(cartTotalPrice) >= parseFloat(cartValue) && parseFloat(freeGiftcardValue) > 0){
                                resValue = gkt.gktFreeGiftCardPopup.f.calculateFreeGiftCardValue(freeGiftcardValue, cartTotalPrice, freeGiftcardPopupData)
                            }
                        }
                        }
                        return resValue
                    } catch (error) {
                        console.log(error);
                        return false

                    }
                },
                isFreeGiftcardProductConditionMet: function (orderData, freeGiftcardPopupData) {
                    try {

                        let orderDataProducts =  orderData.items.map(item => item.product_id)
                        let validProductSet = new Set()
                        let excludeProductSet = new Set()
                        if(freeGiftcardPopupData?.products?.length && freeGiftcardPopupData?.products?.length > 0){
                            for(let i = 0; i < freeGiftcardPopupData.products.length; i++){
                                let product = freeGiftcardPopupData.products[i]
                                validProductSet.add(parseInt(product.productId))
                            }
                        }
                        if(freeGiftcardPopupData?.collectionsData?.length && freeGiftcardPopupData?.collectionsData?.length > 0){
                            for(let i = 0; i < freeGiftcardPopupData.collectionsData.length; i++){
                                let collectionProducts = freeGiftcardPopupData.collectionsData[i].productList
                                if(collectionProducts?.length && collectionProducts?.length > 0){
                                    collectionProducts.forEach(product => {
                                        validProductSet.add(product.productId)
                                    })
                                }
                            }
                        }

                        if(freeGiftcardPopupData?.excludeProducts?.length && freeGiftcardPopupData?.excludeProducts?.length > 0){
                            for(let i = 0; i < freeGiftcardPopupData.excludeProducts.length; i++){
                                let product = freeGiftcardPopupData.excludeProducts[i]
                                excludeProductSet.add(parseInt(product.productId))
                            }
                        }
                        
                        if(validProductSet.size == 0 && excludeProductSet.size == 0){
                            return true
                        }

                        
                        for(let i = 0; i < orderDataProducts.length; i++){
                            let product = orderDataProducts[i]
                            
                            if(excludeProductSet.has(product)){
                                return false
                            }
                            
                            if(validProductSet.has(product)){
                                return  true
                            }
                        }
                        
                        if(validProductSet.size == 0 ){
                            return true
                        }else{
                            return false
                        }

                    } catch (error) {
                        console.log(error);
                        return false
                    }
                },
                // isCustomerTagsConditionMet: function(customerData,freeGiftcardPopupData) {
                //     try{
                //         let excludeCustomerTags = freeGiftcardPopupData?.campaignData?.excludeCustomerTags || [];
                //         let currentCustomerTags = customerData?.tags?.split(","); //customer tags array
                
                //         for (let i = 0; i < currentCustomerTags.length; i++) {
                //         let currentTag = currentCustomerTags[i];
                //             if (currentTag.trim().length > 0 && excludeCustomerTags.includes(currentTag)) {
                //                 return false;
                //             }
                //         }
                //         return true;
                //     } catch(err) {
                //         console.log(err);
                //     }
                // },
                registerEvents: function(){
                    gkt.$(document).on("click", ".gktFreeGiftcardPopupModalClose", gkt.gktFreeGiftCardPopup.action.onModalClose)
                },
            },
            action:{
                onModalClose: function(){
                    gkt.$(".gktFreeGiftcardPopupModalWrapper").css("display", "none")
                },
            }
        },
        gktNotification:{
            init: function(){
                gkt.gktNotification.f.addNotificationWrapperToDOM()
                gkt.gktNotification.initialize()
            },
            state: {
                gktNotification: null,
                gktNotificationType: null,
                gktNotificationMessage: null,
                gktNotificationDuration: null,
                gktNotificationPosition: null,
            },
            initialize: function(){
                

                // notification examples
                // gkt.gktNotification.f.addNotificationItemType1("addNotificationItem-1","If your cart value is greater than 40$ you will get 10$ Free Gift Card.", 100)
                // gkt.gktNotification.f.addNotificationItemType1("addNotificationItem-2", "mayy")
                // gkt.gktNotification.f.addNotificationItemType1("addNotificationItem-3")
              
            },
            f: {
                addNotificationWrapperToDOM: function(){
                    if(gkt.$('.gktNotificationWrapper').length == 0){
                        let gktNotificationWrapper = gkt.$("<div>").addClass("gktNotificationWrapper")
                        gkt.$("body").append(gktNotificationWrapper)
                    }
                },

                addNotificationItemType1: function(itemHeading="",itemHeadingSubText="", closeAfterSec=10){
                    if(itemHeading == "" && itemHeadingSubText == "" ){
                        return
                    }
                    let gktNotificationWrapper = gkt.$(".gktNotificationWrapper")
                    let gktNotificationItem = gkt.$("<div>").addClass("gktNotificationItem")
                    let gktNotificationItemContent2 = gkt.$("<div>").addClass("gktNotificationItemContent2").html('<svg fill="#000000" xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 32 32" width="24px" height="24px"><path d="M 16 3 C 8.832031 3 3 8.832031 3 16 C 3 23.167969 8.832031 29 16 29 C 23.167969 29 29 23.167969 29 16 C 29 8.832031 23.167969 3 16 3 Z M 16 5 C 22.085938 5 27 9.914063 27 16 C 27 22.085938 22.085938 27 16 27 C 9.914063 27 5 22.085938 5 16 C 5 9.914063 9.914063 5 16 5 Z M 15 10 L 15 12 L 17 12 L 17 10 Z M 15 14 L 15 22 L 17 22 L 17 14 Z"/></svg>')
                    let gktNotificationItemContent3 = gkt.$("<div>").addClass("gktNotificationItemContent3")
                    let gktNotificationItemContent3Heading = gkt.$("<div>").addClass("gktNotificationItemContent3Heading").html(itemHeading)
                    let gktNotificationItemContent3SubText = gkt.$("<div>").addClass("gktNotificationItemContent3SubText").html(itemHeadingSubText)
                    gktNotificationItemContent3.append(gktNotificationItemContent3Heading)
                    gktNotificationItemContent3.append(gktNotificationItemContent3SubText)
                    let gktNotificationItemContent4 = gkt.$("<div>").addClass("gktNotificationItemContent4").html('<?xml version="1.0" encoding="utf-8"?><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="12px" height="12px" viewBox="0 0 122.878 122.88" enable-background="new 0 0 122.878 122.88" xml:space="preserve"><g><path fill=#575050 d="M1.426,8.313c-1.901-1.901-1.901-4.984,0-6.886c1.901-1.902,4.984-1.902,6.886,0l53.127,53.127l53.127-53.127 c1.901-1.902,4.984-1.902,6.887,0c1.901,1.901,1.901,4.985,0,6.886L68.324,61.439l53.128,53.128c1.901,1.901,1.901,4.984,0,6.886 c-1.902,1.902-4.985,1.902-6.887,0L61.438,68.326L8.312,121.453c-1.901,1.902-4.984,1.902-6.886,0 c-1.901-1.901-1.901-4.984,0-6.886l53.127-53.128L1.426,8.313L1.426,8.313z"/></g></svg>')
                    gktNotificationItemContent4.on("click", function (event) {
                        gktNotificationItem.css("transform","translateX(300px)")
                        setTimeout(()=>{gktNotificationItem.remove()},1000)
                    })
                    
                    setTimeout(function(){
                        console.log("gktNotificationItem", gktNotificationItem)
                        if(gktNotificationItem){
                            gktNotificationItem.css("transform","translateX(300px)")
                            setTimeout(()=>{gktNotificationItem.remove()},1000)
                        }
                    },closeAfterSec*1000)
                    
                    gktNotificationItem.append(gktNotificationItemContent2)
                    gktNotificationItem.append(gktNotificationItemContent3)
                    gktNotificationItem.append(gktNotificationItemContent4)
                    
                    gktNotificationWrapper.css("display", "block")
                    gktNotificationWrapper.append(gktNotificationItem)

                    //slide in the notification
                    setTimeout(()=>{
                        gktNotificationItem.css("transform","translateX(0px)")
                    },100)

                    return gktNotificationItem
                },
                removeNotificationFromDOM: function(){
                    setTimeout(()=>{
                        gkt.$(".gktNotification").remove()
                    }, gkt.gktNotification.state.gktNotificationDuration)
                }
            }
        }
    }

    window.gkt = gkt;
    /*
    * start the program 
    */
    gktUtils.f.loadJquery(function (jqueryRefObj) {
        gkt.$ = jqueryRefObj;

        gkt.$(document).ready(function () {
            console.log("document ready", gkt.$);
            gkt.f.initialize(gkt.$);
        })
    })





</script>
